// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/fluidsynth_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FluidSynthBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FluidSynthBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FluidSynthBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  /// ANSI-C
  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Functions internal to the implementation.
  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// perror(3) external variables
  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  /// Stdio function-access interface.
  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  /// @startlifecycle{Settings}
  ffi.Pointer<fluid_settings_t> new_fluid_settings() {
    return _new_fluid_settings();
  }

  late final _new_fluid_settingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_settings_t> Function()>>(
          'new_fluid_settings');
  late final _new_fluid_settings = _new_fluid_settingsPtr
      .asFunction<ffi.Pointer<fluid_settings_t> Function()>();

  void delete_fluid_settings(
    ffi.Pointer<fluid_settings_t> settings,
  ) {
    return _delete_fluid_settings(
      settings,
    );
  }

  late final _delete_fluid_settingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_settings_t>)>>(
      'delete_fluid_settings');
  late final _delete_fluid_settings = _delete_fluid_settingsPtr
      .asFunction<void Function(ffi.Pointer<fluid_settings_t>)>();

  /// @endlifecycle
  int fluid_settings_get_type(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_get_type(
      settings,
      name,
    );
  }

  late final _fluid_settings_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_get_type');
  late final _fluid_settings_get_type = _fluid_settings_get_typePtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_settings_get_hints(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _fluid_settings_get_hints(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_get_hintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('fluid_settings_get_hints');
  late final _fluid_settings_get_hints =
      _fluid_settings_get_hintsPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int fluid_settings_is_realtime(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_is_realtime(
      settings,
      name,
    );
  }

  late final _fluid_settings_is_realtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_is_realtime');
  late final _fluid_settings_is_realtime =
      _fluid_settings_is_realtimePtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_settings_setstr(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _fluid_settings_setstr(
      settings,
      name,
      str,
    );
  }

  late final _fluid_settings_setstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_setstr');
  late final _fluid_settings_setstr = _fluid_settings_setstrPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int fluid_settings_copystr(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _fluid_settings_copystr(
      settings,
      name,
      str,
      len,
    );
  }

  late final _fluid_settings_copystrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('fluid_settings_copystr');
  late final _fluid_settings_copystr = _fluid_settings_copystrPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int fluid_settings_dupstr(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
  ) {
    return _fluid_settings_dupstr(
      settings,
      name,
      str,
    );
  }

  late final _fluid_settings_dupstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fluid_settings_dupstr');
  late final _fluid_settings_dupstr = _fluid_settings_dupstrPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fluid_settings_getstr_default(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> def,
  ) {
    return _fluid_settings_getstr_default(
      settings,
      name,
      def,
    );
  }

  late final _fluid_settings_getstr_defaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<fluid_settings_t>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'fluid_settings_getstr_default');
  late final _fluid_settings_getstr_default =
      _fluid_settings_getstr_defaultPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fluid_settings_str_equal(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _fluid_settings_str_equal(
      settings,
      name,
      value,
    );
  }

  late final _fluid_settings_str_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_str_equal');
  late final _fluid_settings_str_equal =
      _fluid_settings_str_equalPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int fluid_settings_setnum(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    double val,
  ) {
    return _fluid_settings_setnum(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_setnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Double)>>('fluid_settings_setnum');
  late final _fluid_settings_setnum = _fluid_settings_setnumPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>, double)>();

  int fluid_settings_getnum(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _fluid_settings_getnum(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_getnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('fluid_settings_getnum');
  late final _fluid_settings_getnum = _fluid_settings_getnumPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Double>)>();

  int fluid_settings_getnum_default(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _fluid_settings_getnum_default(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_getnum_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('fluid_settings_getnum_default');
  late final _fluid_settings_getnum_default =
      _fluid_settings_getnum_defaultPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>();

  int fluid_settings_getnum_range(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> min,
    ffi.Pointer<ffi.Double> max,
  ) {
    return _fluid_settings_getnum_range(
      settings,
      name,
      min,
      max,
    );
  }

  late final _fluid_settings_getnum_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('fluid_settings_getnum_range');
  late final _fluid_settings_getnum_range =
      _fluid_settings_getnum_rangePtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int fluid_settings_setint(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    int val,
  ) {
    return _fluid_settings_setint(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_setintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fluid_settings_setint');
  late final _fluid_settings_setint = _fluid_settings_setintPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>, int)>();

  int fluid_settings_getint(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _fluid_settings_getint(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_getintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('fluid_settings_getint');
  late final _fluid_settings_getint = _fluid_settings_getintPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int fluid_settings_getint_default(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _fluid_settings_getint_default(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_getint_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('fluid_settings_getint_default');
  late final _fluid_settings_getint_default =
      _fluid_settings_getint_defaultPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int fluid_settings_getint_range(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> min,
    ffi.Pointer<ffi.Int> max,
  ) {
    return _fluid_settings_getint_range(
      settings,
      name,
      min,
      max,
    );
  }

  late final _fluid_settings_getint_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_settings_getint_range');
  late final _fluid_settings_getint_range =
      _fluid_settings_getint_rangePtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void fluid_settings_foreach_option(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> data,
    fluid_settings_foreach_option_t func,
  ) {
    return _fluid_settings_foreach_option(
      settings,
      name,
      data,
      func,
    );
  }

  late final _fluid_settings_foreach_optionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<fluid_settings_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Void>,
                  fluid_settings_foreach_option_t)>>(
      'fluid_settings_foreach_option');
  late final _fluid_settings_foreach_option =
      _fluid_settings_foreach_optionPtr.asFunction<
          void Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, fluid_settings_foreach_option_t)>();

  int fluid_settings_option_count(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_option_count(
      settings,
      name,
    );
  }

  late final _fluid_settings_option_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_option_count');
  late final _fluid_settings_option_count =
      _fluid_settings_option_countPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fluid_settings_option_concat(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _fluid_settings_option_concat(
      settings,
      name,
      separator,
    );
  }

  late final _fluid_settings_option_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_option_concat');
  late final _fluid_settings_option_concat =
      _fluid_settings_option_concatPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void fluid_settings_foreach(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Void> data,
    fluid_settings_foreach_t func,
  ) {
    return _fluid_settings_foreach(
      settings,
      data,
      func,
    );
  }

  late final _fluid_settings_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Void>,
              fluid_settings_foreach_t)>>('fluid_settings_foreach');
  late final _fluid_settings_foreach = _fluid_settings_foreachPtr.asFunction<
      void Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Void>,
          fluid_settings_foreach_t)>();

  /// @startlifecycle{Synthesizer}
  ffi.Pointer<fluid_synth_t> new_fluid_synth(
    ffi.Pointer<fluid_settings_t> settings,
  ) {
    return _new_fluid_synth(
      settings,
    );
  }

  late final _new_fluid_synthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_synth_t> Function(
              ffi.Pointer<fluid_settings_t>)>>('new_fluid_synth');
  late final _new_fluid_synth = _new_fluid_synthPtr.asFunction<
      ffi.Pointer<fluid_synth_t> Function(ffi.Pointer<fluid_settings_t>)>();

  void delete_fluid_synth(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _delete_fluid_synth(
      synth,
    );
  }

  late final _delete_fluid_synthPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_synth_t>)>>(
      'delete_fluid_synth');
  late final _delete_fluid_synth = _delete_fluid_synthPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>)>();

  /// @endlifecycle
  double fluid_synth_get_cpu_load(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_cpu_load(
      synth,
    );
  }

  late final _fluid_synth_get_cpu_loadPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_cpu_load');
  late final _fluid_synth_get_cpu_load = _fluid_synth_get_cpu_loadPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  ffi.Pointer<ffi.Char> fluid_synth_error(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_error(
      synth,
    );
  }

  late final _fluid_synth_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_synth_t>)>>('fluid_synth_error');
  late final _fluid_synth_error = _fluid_synth_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_synth_t>)>();

  /// @defgroup midi_messages MIDI Channel Messages
  /// @ingroup synth
  ///
  /// The MIDI channel message functions are mostly directly named after their
  /// counterpart MIDI messages. They are a high-level interface to controlling
  /// the synthesizer, playing notes and changing note and channel parameters.
  ///
  /// @{
  int fluid_synth_noteon(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
    int vel,
  ) {
    return _fluid_synth_noteon(
      synth,
      chan,
      key,
      vel,
    );
  }

  late final _fluid_synth_noteonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_noteon');
  late final _fluid_synth_noteon = _fluid_synth_noteonPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_noteoff(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
  ) {
    return _fluid_synth_noteoff(
      synth,
      chan,
      key,
    );
  }

  late final _fluid_synth_noteoffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_noteoff');
  late final _fluid_synth_noteoff = _fluid_synth_noteoffPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_cc(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int ctrl,
    int val,
  ) {
    return _fluid_synth_cc(
      synth,
      chan,
      ctrl,
      val,
    );
  }

  late final _fluid_synth_ccPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_cc');
  late final _fluid_synth_cc = _fluid_synth_ccPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_get_cc(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int ctrl,
    ffi.Pointer<ffi.Int> pval,
  ) {
    return _fluid_synth_get_cc(
      synth,
      chan,
      ctrl,
      pval,
    );
  }

  late final _fluid_synth_get_ccPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_cc');
  late final _fluid_synth_get_cc = _fluid_synth_get_ccPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>, int, int, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_sysex(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> data,
    int len,
    ffi.Pointer<ffi.Char> response,
    ffi.Pointer<ffi.Int> response_len,
    ffi.Pointer<ffi.Int> handled,
    int dryrun,
  ) {
    return _fluid_synth_sysex(
      synth,
      data,
      len,
      response,
      response_len,
      handled,
      dryrun,
    );
  }

  late final _fluid_synth_sysexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('fluid_synth_sysex');
  late final _fluid_synth_sysex = _fluid_synth_sysexPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int fluid_synth_pitch_bend(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int val,
  ) {
    return _fluid_synth_pitch_bend(
      synth,
      chan,
      val,
    );
  }

  late final _fluid_synth_pitch_bendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_pitch_bend');
  late final _fluid_synth_pitch_bend = _fluid_synth_pitch_bendPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_pitch_bend(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> ppitch_bend,
  ) {
    return _fluid_synth_get_pitch_bend(
      synth,
      chan,
      ppitch_bend,
    );
  }

  late final _fluid_synth_get_pitch_bendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_pitch_bend');
  late final _fluid_synth_get_pitch_bend =
      _fluid_synth_get_pitch_bendPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_pitch_wheel_sens(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int val,
  ) {
    return _fluid_synth_pitch_wheel_sens(
      synth,
      chan,
      val,
    );
  }

  late final _fluid_synth_pitch_wheel_sensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_pitch_wheel_sens');
  late final _fluid_synth_pitch_wheel_sens = _fluid_synth_pitch_wheel_sensPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_pitch_wheel_sens(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> pval,
  ) {
    return _fluid_synth_get_pitch_wheel_sens(
      synth,
      chan,
      pval,
    );
  }

  late final _fluid_synth_get_pitch_wheel_sensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_pitch_wheel_sens');
  late final _fluid_synth_get_pitch_wheel_sens =
      _fluid_synth_get_pitch_wheel_sensPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_program_change(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int program,
  ) {
    return _fluid_synth_program_change(
      synth,
      chan,
      program,
    );
  }

  late final _fluid_synth_program_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_program_change');
  late final _fluid_synth_program_change = _fluid_synth_program_changePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_channel_pressure(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int val,
  ) {
    return _fluid_synth_channel_pressure(
      synth,
      chan,
      val,
    );
  }

  late final _fluid_synth_channel_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_channel_pressure');
  late final _fluid_synth_channel_pressure = _fluid_synth_channel_pressurePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_key_pressure(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
    int val,
  ) {
    return _fluid_synth_key_pressure(
      synth,
      chan,
      key,
      val,
    );
  }

  late final _fluid_synth_key_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_key_pressure');
  late final _fluid_synth_key_pressure = _fluid_synth_key_pressurePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_bank_select(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int bank,
  ) {
    return _fluid_synth_bank_select(
      synth,
      chan,
      bank,
    );
  }

  late final _fluid_synth_bank_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_bank_select');
  late final _fluid_synth_bank_select = _fluid_synth_bank_selectPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_sfont_select(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int sfont_id,
  ) {
    return _fluid_synth_sfont_select(
      synth,
      chan,
      sfont_id,
    );
  }

  late final _fluid_synth_sfont_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_sfont_select');
  late final _fluid_synth_sfont_select = _fluid_synth_sfont_selectPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_program_select(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int sfont_id,
    int bank_num,
    int preset_num,
  ) {
    return _fluid_synth_program_select(
      synth,
      chan,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_program_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('fluid_synth_program_select');
  late final _fluid_synth_program_select =
      _fluid_synth_program_selectPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int, int, int)>();

  int fluid_synth_program_select_by_sfont_name(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Char> sfont_name,
    int bank_num,
    int preset_num,
  ) {
    return _fluid_synth_program_select_by_sfont_name(
      synth,
      chan,
      sfont_name,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_program_select_by_sfont_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_program_select_by_sfont_name');
  late final _fluid_synth_program_select_by_sfont_name =
      _fluid_synth_program_select_by_sfont_namePtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Char>,
              int, int)>();

  int fluid_synth_get_program(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> sfont_id,
    ffi.Pointer<ffi.Int> bank_num,
    ffi.Pointer<ffi.Int> preset_num,
  ) {
    return _fluid_synth_get_program(
      synth,
      chan,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_get_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_program');
  late final _fluid_synth_get_program = _fluid_synth_get_programPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_unset_program(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_unset_program(
      synth,
      chan,
    );
  }

  late final _fluid_synth_unset_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_unset_program');
  late final _fluid_synth_unset_program = _fluid_synth_unset_programPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_program_reset(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_program_reset(
      synth,
    );
  }

  late final _fluid_synth_program_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_program_reset');
  late final _fluid_synth_program_reset = _fluid_synth_program_resetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_system_reset(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_system_reset(
      synth,
    );
  }

  late final _fluid_synth_system_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_system_reset');
  late final _fluid_synth_system_reset = _fluid_synth_system_resetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_all_notes_off(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_all_notes_off(
      synth,
      chan,
    );
  }

  late final _fluid_synth_all_notes_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_all_notes_off');
  late final _fluid_synth_all_notes_off = _fluid_synth_all_notes_offPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_all_sounds_off(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_all_sounds_off(
      synth,
      chan,
    );
  }

  late final _fluid_synth_all_sounds_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_all_sounds_off');
  late final _fluid_synth_all_sounds_off = _fluid_synth_all_sounds_offPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_set_gen(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int param,
    double value,
  ) {
    return _fluid_synth_set_gen(
      synth,
      chan,
      param,
      value,
    );
  }

  late final _fluid_synth_set_genPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Float)>>('fluid_synth_set_gen');
  late final _fluid_synth_set_gen = _fluid_synth_set_genPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, double)>();

  double fluid_synth_get_gen(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int param,
  ) {
    return _fluid_synth_get_gen(
      synth,
      chan,
      param,
    );
  }

  late final _fluid_synth_get_genPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_get_gen');
  late final _fluid_synth_get_gen = _fluid_synth_get_genPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// @defgroup voice_control Synthesis Voice Control
  /// @ingroup synth
  ///
  /// Low-level access to synthesis voices.
  ///
  /// @{
  int fluid_synth_start(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
    ffi.Pointer<fluid_preset_t> preset,
    int audio_chan,
    int midi_chan,
    int key,
    int vel,
  ) {
    return _fluid_synth_start(
      synth,
      id,
      preset,
      audio_chan,
      midi_chan,
      key,
      vel,
    );
  }

  late final _fluid_synth_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt,
              ffi.Pointer<fluid_preset_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fluid_synth_start');
  late final _fluid_synth_start = _fluid_synth_startPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<fluid_preset_t>,
          int, int, int, int)>();

  int fluid_synth_stop(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
  ) {
    return _fluid_synth_stop(
      synth,
      id,
    );
  }

  late final _fluid_synth_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt)>>('fluid_synth_stop');
  late final _fluid_synth_stop = _fluid_synth_stopPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  ffi.Pointer<fluid_voice_t> fluid_synth_alloc_voice(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sample_t> sample,
    int channum,
    int key,
    int vel,
  ) {
    return _fluid_synth_alloc_voice(
      synth,
      sample,
      channum,
      key,
      vel,
    );
  }

  late final _fluid_synth_alloc_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_voice_t> Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sample_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fluid_synth_alloc_voice');
  late final _fluid_synth_alloc_voice = _fluid_synth_alloc_voicePtr.asFunction<
      ffi.Pointer<fluid_voice_t> Function(ffi.Pointer<fluid_synth_t>,
          ffi.Pointer<fluid_sample_t>, int, int, int)>();

  void fluid_synth_start_voice(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_synth_start_voice(
      synth,
      voice,
    );
  }

  late final _fluid_synth_start_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_voice_t>)>>('fluid_synth_start_voice');
  late final _fluid_synth_start_voice = _fluid_synth_start_voicePtr.asFunction<
      void Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_voice_t>)>();

  void fluid_synth_get_voicelist(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Pointer<fluid_voice_t>> buf,
    int bufsize,
    int ID,
  ) {
    return _fluid_synth_get_voicelist(
      synth,
      buf,
      bufsize,
      ID,
    );
  }

  late final _fluid_synth_get_voicelistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Pointer<fluid_voice_t>>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_get_voicelist');
  late final _fluid_synth_get_voicelist =
      _fluid_synth_get_voicelistPtr.asFunction<
          void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Pointer<fluid_voice_t>>, int, int)>();

  /// @defgroup soundfont_management SoundFont Management
  /// @ingroup synth
  ///
  /// Functions to load and unload SoundFonts.
  ///
  /// @{
  int fluid_synth_sfload(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> filename,
    int reset_presets,
  ) {
    return _fluid_synth_sfload(
      synth,
      filename,
      reset_presets,
    );
  }

  late final _fluid_synth_sfloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fluid_synth_sfload');
  late final _fluid_synth_sfload = _fluid_synth_sfloadPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>, int)>();

  int fluid_synth_sfreload(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
  ) {
    return _fluid_synth_sfreload(
      synth,
      id,
    );
  }

  late final _fluid_synth_sfreloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>, ffi.Int)>>('fluid_synth_sfreload');
  late final _fluid_synth_sfreload = _fluid_synth_sfreloadPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_sfunload(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
    int reset_presets,
  ) {
    return _fluid_synth_sfunload(
      synth,
      id,
      reset_presets,
    );
  }

  late final _fluid_synth_sfunloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_sfunload');
  late final _fluid_synth_sfunload = _fluid_synth_sfunloadPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_add_sfont(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_synth_add_sfont(
      synth,
      sfont,
    );
  }

  late final _fluid_synth_add_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sfont_t>)>>('fluid_synth_add_sfont');
  late final _fluid_synth_add_sfont = _fluid_synth_add_sfontPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_sfont_t>)>();

  int fluid_synth_remove_sfont(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_synth_remove_sfont(
      synth,
      sfont,
    );
  }

  late final _fluid_synth_remove_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sfont_t>)>>('fluid_synth_remove_sfont');
  late final _fluid_synth_remove_sfont =
      _fluid_synth_remove_sfontPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_sfont_t>)>();

  int fluid_synth_sfcount(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_sfcount(
      synth,
    );
  }

  late final _fluid_synth_sfcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_sfcount');
  late final _fluid_synth_sfcount = _fluid_synth_sfcountPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  ffi.Pointer<fluid_sfont_t> fluid_synth_get_sfont(
    ffi.Pointer<fluid_synth_t> synth,
    int num,
  ) {
    return _fluid_synth_get_sfont(
      synth,
      num,
    );
  }

  late final _fluid_synth_get_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt)>>('fluid_synth_get_sfont');
  late final _fluid_synth_get_sfont = _fluid_synth_get_sfontPtr.asFunction<
      ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>, int)>();

  ffi.Pointer<fluid_sfont_t> fluid_synth_get_sfont_by_id(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
  ) {
    return _fluid_synth_get_sfont_by_id(
      synth,
      id,
    );
  }

  late final _fluid_synth_get_sfont_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_get_sfont_by_id');
  late final _fluid_synth_get_sfont_by_id =
      _fluid_synth_get_sfont_by_idPtr.asFunction<
          ffi.Pointer<fluid_sfont_t> Function(
              ffi.Pointer<fluid_synth_t>, int)>();

  ffi.Pointer<fluid_sfont_t> fluid_synth_get_sfont_by_name(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_synth_get_sfont_by_name(
      synth,
      name,
    );
  }

  late final _fluid_synth_get_sfont_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_synth_get_sfont_by_name');
  late final _fluid_synth_get_sfont_by_name =
      _fluid_synth_get_sfont_by_namePtr.asFunction<
          ffi.Pointer<fluid_sfont_t> Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_synth_set_bank_offset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
    int offset,
  ) {
    return _fluid_synth_set_bank_offset(
      synth,
      sfont_id,
      offset,
    );
  }

  late final _fluid_synth_set_bank_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_bank_offset');
  late final _fluid_synth_set_bank_offset = _fluid_synth_set_bank_offsetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_bank_offset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
  ) {
    return _fluid_synth_get_bank_offset(
      synth,
      sfont_id,
    );
  }

  late final _fluid_synth_get_bank_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_get_bank_offset');
  late final _fluid_synth_get_bank_offset = _fluid_synth_get_bank_offsetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// @defgroup reverb_effect Effect - Reverb
  /// @ingroup synth
  ///
  /// Functions for configuring the built-in reverb effect
  ///
  /// @{
  void fluid_synth_set_reverb_on(
    ffi.Pointer<fluid_synth_t> synth,
    int on1,
  ) {
    return _fluid_synth_set_reverb_on(
      synth,
      on1,
    );
  }

  late final _fluid_synth_set_reverb_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_reverb_on');
  late final _fluid_synth_set_reverb_on = _fluid_synth_set_reverb_onPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_reverb_on(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    int on1,
  ) {
    return _fluid_synth_reverb_on(
      synth,
      fx_group,
      on1,
    );
  }

  late final _fluid_synth_reverb_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_reverb_on');
  late final _fluid_synth_reverb_on = _fluid_synth_reverb_onPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_set_reverb(
    ffi.Pointer<fluid_synth_t> synth,
    double roomsize,
    double damping,
    double width,
    double level,
  ) {
    return _fluid_synth_set_reverb(
      synth,
      roomsize,
      damping,
      width,
      level,
    );
  }

  late final _fluid_synth_set_reverbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('fluid_synth_set_reverb');
  late final _fluid_synth_set_reverb = _fluid_synth_set_reverbPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>, double, double, double, double)>();

  int fluid_synth_set_reverb_roomsize(
    ffi.Pointer<fluid_synth_t> synth,
    double roomsize,
  ) {
    return _fluid_synth_set_reverb_roomsize(
      synth,
      roomsize,
    );
  }

  late final _fluid_synth_set_reverb_roomsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_reverb_roomsize');
  late final _fluid_synth_set_reverb_roomsize =
      _fluid_synth_set_reverb_roomsizePtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  int fluid_synth_set_reverb_damp(
    ffi.Pointer<fluid_synth_t> synth,
    double damping,
  ) {
    return _fluid_synth_set_reverb_damp(
      synth,
      damping,
    );
  }

  late final _fluid_synth_set_reverb_dampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_reverb_damp');
  late final _fluid_synth_set_reverb_damp = _fluid_synth_set_reverb_dampPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  int fluid_synth_set_reverb_width(
    ffi.Pointer<fluid_synth_t> synth,
    double width,
  ) {
    return _fluid_synth_set_reverb_width(
      synth,
      width,
    );
  }

  late final _fluid_synth_set_reverb_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_reverb_width');
  late final _fluid_synth_set_reverb_width = _fluid_synth_set_reverb_widthPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  int fluid_synth_set_reverb_level(
    ffi.Pointer<fluid_synth_t> synth,
    double level,
  ) {
    return _fluid_synth_set_reverb_level(
      synth,
      level,
    );
  }

  late final _fluid_synth_set_reverb_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_reverb_level');
  late final _fluid_synth_set_reverb_level = _fluid_synth_set_reverb_levelPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  double fluid_synth_get_reverb_roomsize(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_roomsize(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_roomsizePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_roomsize');
  late final _fluid_synth_get_reverb_roomsize =
      _fluid_synth_get_reverb_roomsizePtr
          .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_reverb_damp(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_damp(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_dampPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_damp');
  late final _fluid_synth_get_reverb_damp = _fluid_synth_get_reverb_dampPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_reverb_level(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_level(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_levelPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_level');
  late final _fluid_synth_get_reverb_level = _fluid_synth_get_reverb_levelPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_reverb_width(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_width(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_width');
  late final _fluid_synth_get_reverb_width = _fluid_synth_get_reverb_widthPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_set_reverb_group_roomsize(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double roomsize,
  ) {
    return _fluid_synth_set_reverb_group_roomsize(
      synth,
      fx_group,
      roomsize,
    );
  }

  late final _fluid_synth_set_reverb_group_roomsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_reverb_group_roomsize');
  late final _fluid_synth_set_reverb_group_roomsize =
      _fluid_synth_set_reverb_group_roomsizePtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_set_reverb_group_damp(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double damping,
  ) {
    return _fluid_synth_set_reverb_group_damp(
      synth,
      fx_group,
      damping,
    );
  }

  late final _fluid_synth_set_reverb_group_dampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_reverb_group_damp');
  late final _fluid_synth_set_reverb_group_damp =
      _fluid_synth_set_reverb_group_dampPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_set_reverb_group_width(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double width,
  ) {
    return _fluid_synth_set_reverb_group_width(
      synth,
      fx_group,
      width,
    );
  }

  late final _fluid_synth_set_reverb_group_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_reverb_group_width');
  late final _fluid_synth_set_reverb_group_width =
      _fluid_synth_set_reverb_group_widthPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_set_reverb_group_level(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double level,
  ) {
    return _fluid_synth_set_reverb_group_level(
      synth,
      fx_group,
      level,
    );
  }

  late final _fluid_synth_set_reverb_group_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_reverb_group_level');
  late final _fluid_synth_set_reverb_group_level =
      _fluid_synth_set_reverb_group_levelPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_get_reverb_group_roomsize(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> roomsize,
  ) {
    return _fluid_synth_get_reverb_group_roomsize(
      synth,
      fx_group,
      roomsize,
    );
  }

  late final _fluid_synth_get_reverb_group_roomsizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
                  ffi.Pointer<ffi.Double>)>>(
      'fluid_synth_get_reverb_group_roomsize');
  late final _fluid_synth_get_reverb_group_roomsize =
      _fluid_synth_get_reverb_group_roomsizePtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_get_reverb_group_damp(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> damping,
  ) {
    return _fluid_synth_get_reverb_group_damp(
      synth,
      fx_group,
      damping,
    );
  }

  late final _fluid_synth_get_reverb_group_dampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_get_reverb_group_damp');
  late final _fluid_synth_get_reverb_group_damp =
      _fluid_synth_get_reverb_group_dampPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_get_reverb_group_width(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> width,
  ) {
    return _fluid_synth_get_reverb_group_width(
      synth,
      fx_group,
      width,
    );
  }

  late final _fluid_synth_get_reverb_group_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_get_reverb_group_width');
  late final _fluid_synth_get_reverb_group_width =
      _fluid_synth_get_reverb_group_widthPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_get_reverb_group_level(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> level,
  ) {
    return _fluid_synth_get_reverb_group_level(
      synth,
      fx_group,
      level,
    );
  }

  late final _fluid_synth_get_reverb_group_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_get_reverb_group_level');
  late final _fluid_synth_get_reverb_group_level =
      _fluid_synth_get_reverb_group_levelPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  void fluid_synth_set_chorus_on(
    ffi.Pointer<fluid_synth_t> synth,
    int on1,
  ) {
    return _fluid_synth_set_chorus_on(
      synth,
      on1,
    );
  }

  late final _fluid_synth_set_chorus_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_chorus_on');
  late final _fluid_synth_set_chorus_on = _fluid_synth_set_chorus_onPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_chorus_on(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    int on1,
  ) {
    return _fluid_synth_chorus_on(
      synth,
      fx_group,
      on1,
    );
  }

  late final _fluid_synth_chorus_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_chorus_on');
  late final _fluid_synth_chorus_on = _fluid_synth_chorus_onPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_set_chorus(
    ffi.Pointer<fluid_synth_t> synth,
    int nr,
    double level,
    double speed,
    double depth_ms,
    int type,
  ) {
    return _fluid_synth_set_chorus(
      synth,
      nr,
      level,
      speed,
      depth_ms,
      type,
    );
  }

  late final _fluid_synth_set_chorusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Double,
              ffi.Double, ffi.Double, ffi.Int)>>('fluid_synth_set_chorus');
  late final _fluid_synth_set_chorus = _fluid_synth_set_chorusPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>, int, double, double, double, int)>();

  int fluid_synth_set_chorus_nr(
    ffi.Pointer<fluid_synth_t> synth,
    int nr,
  ) {
    return _fluid_synth_set_chorus_nr(
      synth,
      nr,
    );
  }

  late final _fluid_synth_set_chorus_nrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_chorus_nr');
  late final _fluid_synth_set_chorus_nr = _fluid_synth_set_chorus_nrPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_set_chorus_level(
    ffi.Pointer<fluid_synth_t> synth,
    double level,
  ) {
    return _fluid_synth_set_chorus_level(
      synth,
      level,
    );
  }

  late final _fluid_synth_set_chorus_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_chorus_level');
  late final _fluid_synth_set_chorus_level = _fluid_synth_set_chorus_levelPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  int fluid_synth_set_chorus_speed(
    ffi.Pointer<fluid_synth_t> synth,
    double speed,
  ) {
    return _fluid_synth_set_chorus_speed(
      synth,
      speed,
    );
  }

  late final _fluid_synth_set_chorus_speedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_chorus_speed');
  late final _fluid_synth_set_chorus_speed = _fluid_synth_set_chorus_speedPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  int fluid_synth_set_chorus_depth(
    ffi.Pointer<fluid_synth_t> synth,
    double depth_ms,
  ) {
    return _fluid_synth_set_chorus_depth(
      synth,
      depth_ms,
    );
  }

  late final _fluid_synth_set_chorus_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Double)>>('fluid_synth_set_chorus_depth');
  late final _fluid_synth_set_chorus_depth = _fluid_synth_set_chorus_depthPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, double)>();

  int fluid_synth_set_chorus_type(
    ffi.Pointer<fluid_synth_t> synth,
    int type,
  ) {
    return _fluid_synth_set_chorus_type(
      synth,
      type,
    );
  }

  late final _fluid_synth_set_chorus_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_chorus_type');
  late final _fluid_synth_set_chorus_type = _fluid_synth_set_chorus_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_get_chorus_nr(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_nr(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_nrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_chorus_nr');
  late final _fluid_synth_get_chorus_nr = _fluid_synth_get_chorus_nrPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_chorus_level(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_level(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_levelPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_chorus_level');
  late final _fluid_synth_get_chorus_level = _fluid_synth_get_chorus_levelPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_chorus_speed(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_speed(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_speedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_chorus_speed');
  late final _fluid_synth_get_chorus_speed = _fluid_synth_get_chorus_speedPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_chorus_depth(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_depth(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_depthPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_chorus_depth');
  late final _fluid_synth_get_chorus_depth = _fluid_synth_get_chorus_depthPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_get_chorus_type(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_type(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_chorus_type');
  late final _fluid_synth_get_chorus_type = _fluid_synth_get_chorus_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_set_chorus_group_nr(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    int nr,
  ) {
    return _fluid_synth_set_chorus_group_nr(
      synth,
      fx_group,
      nr,
    );
  }

  late final _fluid_synth_set_chorus_group_nrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_chorus_group_nr');
  late final _fluid_synth_set_chorus_group_nr =
      _fluid_synth_set_chorus_group_nrPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_set_chorus_group_level(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double level,
  ) {
    return _fluid_synth_set_chorus_group_level(
      synth,
      fx_group,
      level,
    );
  }

  late final _fluid_synth_set_chorus_group_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_chorus_group_level');
  late final _fluid_synth_set_chorus_group_level =
      _fluid_synth_set_chorus_group_levelPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_set_chorus_group_speed(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double speed,
  ) {
    return _fluid_synth_set_chorus_group_speed(
      synth,
      fx_group,
      speed,
    );
  }

  late final _fluid_synth_set_chorus_group_speedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_chorus_group_speed');
  late final _fluid_synth_set_chorus_group_speed =
      _fluid_synth_set_chorus_group_speedPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_set_chorus_group_depth(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    double depth_ms,
  ) {
    return _fluid_synth_set_chorus_group_depth(
      synth,
      fx_group,
      depth_ms,
    );
  }

  late final _fluid_synth_set_chorus_group_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Double)>>('fluid_synth_set_chorus_group_depth');
  late final _fluid_synth_set_chorus_group_depth =
      _fluid_synth_set_chorus_group_depthPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, double)>();

  int fluid_synth_set_chorus_group_type(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    int type,
  ) {
    return _fluid_synth_set_chorus_group_type(
      synth,
      fx_group,
      type,
    );
  }

  late final _fluid_synth_set_chorus_group_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_chorus_group_type');
  late final _fluid_synth_set_chorus_group_type =
      _fluid_synth_set_chorus_group_typePtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_chorus_group_nr(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Int> nr,
  ) {
    return _fluid_synth_get_chorus_group_nr(
      synth,
      fx_group,
      nr,
    );
  }

  late final _fluid_synth_get_chorus_group_nrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_chorus_group_nr');
  late final _fluid_synth_get_chorus_group_nr =
      _fluid_synth_get_chorus_group_nrPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_get_chorus_group_level(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> level,
  ) {
    return _fluid_synth_get_chorus_group_level(
      synth,
      fx_group,
      level,
    );
  }

  late final _fluid_synth_get_chorus_group_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_get_chorus_group_level');
  late final _fluid_synth_get_chorus_group_level =
      _fluid_synth_get_chorus_group_levelPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_get_chorus_group_speed(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> speed,
  ) {
    return _fluid_synth_get_chorus_group_speed(
      synth,
      fx_group,
      speed,
    );
  }

  late final _fluid_synth_get_chorus_group_speedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_get_chorus_group_speed');
  late final _fluid_synth_get_chorus_group_speed =
      _fluid_synth_get_chorus_group_speedPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_get_chorus_group_depth(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Double> depth_ms,
  ) {
    return _fluid_synth_get_chorus_group_depth(
      synth,
      fx_group,
      depth_ms,
    );
  }

  late final _fluid_synth_get_chorus_group_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_get_chorus_group_depth');
  late final _fluid_synth_get_chorus_group_depth =
      _fluid_synth_get_chorus_group_depthPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_get_chorus_group_type(
    ffi.Pointer<fluid_synth_t> synth,
    int fx_group,
    ffi.Pointer<ffi.Int> type,
  ) {
    return _fluid_synth_get_chorus_group_type(
      synth,
      fx_group,
      type,
    );
  }

  late final _fluid_synth_get_chorus_group_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_chorus_group_type');
  late final _fluid_synth_get_chorus_group_type =
      _fluid_synth_get_chorus_group_typePtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  /// @defgroup synthesis_params Synthesis Parameters
  /// @ingroup synth
  ///
  /// Functions to control and query synthesis parameters like gain and
  /// polyphony count.
  ///
  /// @{
  int fluid_synth_count_midi_channels(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_midi_channels(
      synth,
    );
  }

  late final _fluid_synth_count_midi_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_midi_channels');
  late final _fluid_synth_count_midi_channels =
      _fluid_synth_count_midi_channelsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_count_audio_channels(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_audio_channels(
      synth,
    );
  }

  late final _fluid_synth_count_audio_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_audio_channels');
  late final _fluid_synth_count_audio_channels =
      _fluid_synth_count_audio_channelsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_count_audio_groups(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_audio_groups(
      synth,
    );
  }

  late final _fluid_synth_count_audio_groupsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_audio_groups');
  late final _fluid_synth_count_audio_groups =
      _fluid_synth_count_audio_groupsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_count_effects_channels(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_effects_channels(
      synth,
    );
  }

  late final _fluid_synth_count_effects_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_effects_channels');
  late final _fluid_synth_count_effects_channels =
      _fluid_synth_count_effects_channelsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_count_effects_groups(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_effects_groups(
      synth,
    );
  }

  late final _fluid_synth_count_effects_groupsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_effects_groups');
  late final _fluid_synth_count_effects_groups =
      _fluid_synth_count_effects_groupsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  void fluid_synth_set_sample_rate(
    ffi.Pointer<fluid_synth_t> synth,
    double sample_rate,
  ) {
    return _fluid_synth_set_sample_rate(
      synth,
      sample_rate,
    );
  }

  late final _fluid_synth_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Float)>>('fluid_synth_set_sample_rate');
  late final _fluid_synth_set_sample_rate = _fluid_synth_set_sample_ratePtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, double)>();

  void fluid_synth_set_gain(
    ffi.Pointer<fluid_synth_t> synth,
    double gain,
  ) {
    return _fluid_synth_set_gain(
      synth,
      gain,
    );
  }

  late final _fluid_synth_set_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_synth_t>, ffi.Float)>>('fluid_synth_set_gain');
  late final _fluid_synth_set_gain = _fluid_synth_set_gainPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, double)>();

  double fluid_synth_get_gain(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_gain(
      synth,
    );
  }

  late final _fluid_synth_get_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_gain');
  late final _fluid_synth_get_gain = _fluid_synth_get_gainPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_set_polyphony(
    ffi.Pointer<fluid_synth_t> synth,
    int polyphony,
  ) {
    return _fluid_synth_set_polyphony(
      synth,
      polyphony,
    );
  }

  late final _fluid_synth_set_polyphonyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_polyphony');
  late final _fluid_synth_set_polyphony = _fluid_synth_set_polyphonyPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_get_polyphony(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_polyphony(
      synth,
    );
  }

  late final _fluid_synth_get_polyphonyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_polyphony');
  late final _fluid_synth_get_polyphony = _fluid_synth_get_polyphonyPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_get_active_voice_count(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_active_voice_count(
      synth,
    );
  }

  late final _fluid_synth_get_active_voice_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_active_voice_count');
  late final _fluid_synth_get_active_voice_count =
      _fluid_synth_get_active_voice_countPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_get_internal_bufsize(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_internal_bufsize(
      synth,
    );
  }

  late final _fluid_synth_get_internal_bufsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_internal_bufsize');
  late final _fluid_synth_get_internal_bufsize =
      _fluid_synth_get_internal_bufsizePtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_set_interp_method(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int interp_method,
  ) {
    return _fluid_synth_set_interp_method(
      synth,
      chan,
      interp_method,
    );
  }

  late final _fluid_synth_set_interp_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_interp_method');
  late final _fluid_synth_set_interp_method = _fluid_synth_set_interp_methodPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_add_default_mod(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_mod_t> mod,
    int mode,
  ) {
    return _fluid_synth_add_default_mod(
      synth,
      mod,
      mode,
    );
  }

  late final _fluid_synth_add_default_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_mod_t>,
              ffi.Int)>>('fluid_synth_add_default_mod');
  late final _fluid_synth_add_default_mod =
      _fluid_synth_add_default_modPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_mod_t>, int)>();

  int fluid_synth_remove_default_mod(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_synth_remove_default_mod(
      synth,
      mod,
    );
  }

  late final _fluid_synth_remove_default_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_mod_t>)>>('fluid_synth_remove_default_mod');
  late final _fluid_synth_remove_default_mod =
      _fluid_synth_remove_default_modPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_mod_t>)>();

  /// @defgroup tuning MIDI Tuning
  /// @ingroup synth
  ///
  /// The functions in this section implement the MIDI Tuning Standard interface.
  ///
  /// @{
  int fluid_synth_activate_key_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int bank,
    int prog,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> pitch,
    int apply,
  ) {
    return _fluid_synth_activate_key_tuning(
      synth,
      bank,
      prog,
      name,
      pitch,
      apply,
    );
  }

  late final _fluid_synth_activate_key_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Int)>>('fluid_synth_activate_key_tuning');
  late final _fluid_synth_activate_key_tuning =
      _fluid_synth_activate_key_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>, int)>();

  int fluid_synth_activate_octave_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int bank,
    int prog,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> pitch,
    int apply,
  ) {
    return _fluid_synth_activate_octave_tuning(
      synth,
      bank,
      prog,
      name,
      pitch,
      apply,
    );
  }

  late final _fluid_synth_activate_octave_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Int)>>('fluid_synth_activate_octave_tuning');
  late final _fluid_synth_activate_octave_tuning =
      _fluid_synth_activate_octave_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>, int)>();

  int fluid_synth_tune_notes(
    ffi.Pointer<fluid_synth_t> synth,
    int bank,
    int prog,
    int len,
    ffi.Pointer<ffi.Int> keys,
    ffi.Pointer<ffi.Double> pitch,
    int apply,
  ) {
    return _fluid_synth_tune_notes(
      synth,
      bank,
      prog,
      len,
      keys,
      pitch,
      apply,
    );
  }

  late final _fluid_synth_tune_notesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Int)>>('fluid_synth_tune_notes');
  late final _fluid_synth_tune_notes = _fluid_synth_tune_notesPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, int, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>, int)>();

  int fluid_synth_activate_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int bank,
    int prog,
    int apply,
  ) {
    return _fluid_synth_activate_tuning(
      synth,
      chan,
      bank,
      prog,
      apply,
    );
  }

  late final _fluid_synth_activate_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('fluid_synth_activate_tuning');
  late final _fluid_synth_activate_tuning =
      _fluid_synth_activate_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int, int, int)>();

  int fluid_synth_deactivate_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int apply,
  ) {
    return _fluid_synth_deactivate_tuning(
      synth,
      chan,
      apply,
    );
  }

  late final _fluid_synth_deactivate_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_deactivate_tuning');
  late final _fluid_synth_deactivate_tuning = _fluid_synth_deactivate_tuningPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  void fluid_synth_tuning_iteration_start(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_tuning_iteration_start(
      synth,
    );
  }

  late final _fluid_synth_tuning_iteration_startPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_tuning_iteration_start');
  late final _fluid_synth_tuning_iteration_start =
      _fluid_synth_tuning_iteration_startPtr
          .asFunction<void Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_tuning_iteration_next(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Int> bank,
    ffi.Pointer<ffi.Int> prog,
  ) {
    return _fluid_synth_tuning_iteration_next(
      synth,
      bank,
      prog,
    );
  }

  late final _fluid_synth_tuning_iteration_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_tuning_iteration_next');
  late final _fluid_synth_tuning_iteration_next =
      _fluid_synth_tuning_iteration_nextPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int fluid_synth_tuning_dump(
    ffi.Pointer<fluid_synth_t> synth,
    int bank,
    int prog,
    ffi.Pointer<ffi.Char> name,
    int len,
    ffi.Pointer<ffi.Double> pitch,
  ) {
    return _fluid_synth_tuning_dump(
      synth,
      bank,
      prog,
      name,
      len,
      pitch,
    );
  }

  late final _fluid_synth_tuning_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_tuning_dump');
  late final _fluid_synth_tuning_dump = _fluid_synth_tuning_dumpPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, int, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<ffi.Double>)>();

  /// @defgroup audio_rendering Audio Rendering
  /// @ingroup synth
  ///
  /// The functions in this section can be used to render audio directly to
  /// memory buffers. They are used internally by the \ref audio_driver and \ref file_renderer,
  /// but can also be used manually for custom processing of the rendered audio.
  ///
  /// @note Please note that all following functions block during rendering. If your goal is to
  /// render real-time audio, ensure that you call these functions from a high-priority
  /// thread with little to no other duties other than calling the rendering functions.
  ///
  /// @warning
  /// If a concurrently running thread calls any other sound affecting synth function
  /// (e.g. fluid_synth_noteon(), fluid_synth_cc(), etc.) it is unspecified whether the event triggered by such a call
  /// will be effective in the recently synthesized audio. While this is inaudible when only requesting small chunks from the
  /// synth with every call (cf. fluid_synth_get_internal_bufsize()), it will become evident when requesting larger sample chunks:
  /// With larger sample chunks it will get harder for the synth to react on those spontaneously occurring events in time
  /// (like events received from a MIDI driver, or directly made synth API calls).
  /// In those real-time scenarios, prefer requesting smaller
  /// sample chunks from the synth with each call, to avoid poor quantization of your events in the synthesized audio.
  /// This issue is not applicable when using the MIDI player or sequencer for event dispatching. Also
  /// refer to the documentation of \setting{audio_period-size}.
  ///
  /// @{
  int fluid_synth_write_s16(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    ffi.Pointer<ffi.Void> lout,
    int loff,
    int lincr,
    ffi.Pointer<ffi.Void> rout,
    int roff,
    int rincr,
  ) {
    return _fluid_synth_write_s16(
      synth,
      len,
      lout,
      loff,
      lincr,
      rout,
      roff,
      rincr,
    );
  }

  late final _fluid_synth_write_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_write_s16');
  late final _fluid_synth_write_s16 = _fluid_synth_write_s16Ptr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Void>, int,
          int, ffi.Pointer<ffi.Void>, int, int)>();

  int fluid_synth_write_float(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    ffi.Pointer<ffi.Void> lout,
    int loff,
    int lincr,
    ffi.Pointer<ffi.Void> rout,
    int roff,
    int rincr,
  ) {
    return _fluid_synth_write_float(
      synth,
      len,
      lout,
      loff,
      lincr,
      rout,
      roff,
      rincr,
    );
  }

  late final _fluid_synth_write_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_write_float');
  late final _fluid_synth_write_float = _fluid_synth_write_floatPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Void>, int,
          int, ffi.Pointer<ffi.Void>, int, int)>();

  int fluid_synth_nwrite_float(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Float>> left,
    ffi.Pointer<ffi.Pointer<ffi.Float>> right,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx_left,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx_right,
  ) {
    return _fluid_synth_nwrite_float(
      synth,
      len,
      left,
      right,
      fx_left,
      fx_right,
    );
  }

  late final _fluid_synth_nwrite_floatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<fluid_synth_t>,
                  ffi.Int,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>)>>(
      'fluid_synth_nwrite_float');
  late final _fluid_synth_nwrite_float =
      _fluid_synth_nwrite_floatPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>)>();

  int fluid_synth_process(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    int nfx,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx,
    int nout,
    ffi.Pointer<ffi.Pointer<ffi.Float>> out,
  ) {
    return _fluid_synth_process(
      synth,
      len,
      nfx,
      fx,
      nout,
      out,
    );
  }

  late final _fluid_synth_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>)>>('fluid_synth_process');
  late final _fluid_synth_process = _fluid_synth_processPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Float>>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Float>>)>();

  int fluid_synth_set_custom_filter(
    ffi.Pointer<fluid_synth_t> arg0,
    int type,
    int flags,
  ) {
    return _fluid_synth_set_custom_filter(
      arg0,
      type,
      flags,
    );
  }

  late final _fluid_synth_set_custom_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_custom_filter');
  late final _fluid_synth_set_custom_filter = _fluid_synth_set_custom_filterPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_set_channel_type(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int type,
  ) {
    return _fluid_synth_set_channel_type(
      synth,
      chan,
      type,
    );
  }

  late final _fluid_synth_set_channel_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_channel_type');
  late final _fluid_synth_set_channel_type = _fluid_synth_set_channel_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_reset_basic_channel(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_reset_basic_channel(
      synth,
      chan,
    );
  }

  late final _fluid_synth_reset_basic_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_reset_basic_channel');
  late final _fluid_synth_reset_basic_channel =
      _fluid_synth_reset_basic_channelPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_get_basic_channel(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> basic_chan_out,
    ffi.Pointer<ffi.Int> mode_chan_out,
    ffi.Pointer<ffi.Int> basic_val_out,
  ) {
    return _fluid_synth_get_basic_channel(
      synth,
      chan,
      basic_chan_out,
      mode_chan_out,
      basic_val_out,
    );
  }

  late final _fluid_synth_get_basic_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_basic_channel');
  late final _fluid_synth_get_basic_channel =
      _fluid_synth_get_basic_channelPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_set_basic_channel(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int mode,
    int val,
  ) {
    return _fluid_synth_set_basic_channel(
      synth,
      chan,
      mode,
      val,
    );
  }

  late final _fluid_synth_set_basic_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_set_basic_channel');
  late final _fluid_synth_set_basic_channel = _fluid_synth_set_basic_channelPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_set_legato_mode(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int legatomode,
  ) {
    return _fluid_synth_set_legato_mode(
      synth,
      chan,
      legatomode,
    );
  }

  late final _fluid_synth_set_legato_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_legato_mode');
  late final _fluid_synth_set_legato_mode = _fluid_synth_set_legato_modePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_legato_mode(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> legatomode,
  ) {
    return _fluid_synth_get_legato_mode(
      synth,
      chan,
      legatomode,
    );
  }

  late final _fluid_synth_get_legato_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_legato_mode');
  late final _fluid_synth_get_legato_mode =
      _fluid_synth_get_legato_modePtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_set_portamento_mode(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int portamentomode,
  ) {
    return _fluid_synth_set_portamento_mode(
      synth,
      chan,
      portamentomode,
    );
  }

  late final _fluid_synth_set_portamento_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_portamento_mode');
  late final _fluid_synth_set_portamento_mode =
      _fluid_synth_set_portamento_modePtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_portamento_mode(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> portamentomode,
  ) {
    return _fluid_synth_get_portamento_mode(
      synth,
      chan,
      portamentomode,
    );
  }

  late final _fluid_synth_get_portamento_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_portamento_mode');
  late final _fluid_synth_get_portamento_mode =
      _fluid_synth_get_portamento_modePtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  int fluid_synth_set_breath_mode(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int breathmode,
  ) {
    return _fluid_synth_set_breath_mode(
      synth,
      chan,
      breathmode,
    );
  }

  late final _fluid_synth_set_breath_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_breath_mode');
  late final _fluid_synth_set_breath_mode = _fluid_synth_set_breath_modePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_get_breath_mode(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> breathmode,
  ) {
    return _fluid_synth_get_breath_mode(
      synth,
      chan,
      breathmode,
    );
  }

  late final _fluid_synth_get_breath_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_breath_mode');
  late final _fluid_synth_get_breath_mode =
      _fluid_synth_get_breath_modePtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  /// @ingroup settings
  ffi.Pointer<fluid_settings_t> fluid_synth_get_settings(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_settings(
      synth,
    );
  }

  late final _fluid_synth_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_settings_t> Function(
              ffi.Pointer<fluid_synth_t>)>>('fluid_synth_get_settings');
  late final _fluid_synth_get_settings =
      _fluid_synth_get_settingsPtr.asFunction<
          ffi.Pointer<fluid_settings_t> Function(ffi.Pointer<fluid_synth_t>)>();

  /// @ingroup soundfont_loader
  void fluid_synth_add_sfloader(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sfloader_t> loader,
  ) {
    return _fluid_synth_add_sfloader(
      synth,
      loader,
    );
  }

  late final _fluid_synth_add_sfloaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sfloader_t>)>>('fluid_synth_add_sfloader');
  late final _fluid_synth_add_sfloader =
      _fluid_synth_add_sfloaderPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_sfloader_t>)>();

  /// @ingroup soundfont_loader
  ffi.Pointer<fluid_preset_t> fluid_synth_get_channel_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_get_channel_preset(
      synth,
      chan,
    );
  }

  late final _fluid_synth_get_channel_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_get_channel_preset');
  late final _fluid_synth_get_channel_preset =
      _fluid_synth_get_channel_presetPtr.asFunction<
          ffi.Pointer<fluid_preset_t> Function(
              ffi.Pointer<fluid_synth_t>, int)>();

  /// @ingroup midi_input
  int fluid_synth_handle_midi_event(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<fluid_midi_event_t> event,
  ) {
    return _fluid_synth_handle_midi_event(
      data,
      event,
    );
  }

  late final _fluid_synth_handle_midi_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_synth_handle_midi_event');
  late final _fluid_synth_handle_midi_event =
      _fluid_synth_handle_midi_eventPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>();

  /// @ingroup soundfonts
  int fluid_synth_pin_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
    int bank_num,
    int preset_num,
  ) {
    return _fluid_synth_pin_preset(
      synth,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_pin_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_pin_preset');
  late final _fluid_synth_pin_preset = _fluid_synth_pin_presetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  /// @ingroup soundfonts
  int fluid_synth_unpin_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
    int bank_num,
    int preset_num,
  ) {
    return _fluid_synth_unpin_preset(
      synth,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_unpin_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_unpin_preset');
  late final _fluid_synth_unpin_preset = _fluid_synth_unpin_presetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  /// @ingroup ladspa
  ffi.Pointer<fluid_ladspa_fx_t> fluid_synth_get_ladspa_fx(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_ladspa_fx(
      synth,
    );
  }

  late final _fluid_synth_get_ladspa_fxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_ladspa_fx_t> Function(
              ffi.Pointer<fluid_synth_t>)>>('fluid_synth_get_ladspa_fx');
  late final _fluid_synth_get_ladspa_fx =
      _fluid_synth_get_ladspa_fxPtr.asFunction<
          ffi.Pointer<fluid_ladspa_fx_t> Function(
              ffi.Pointer<fluid_synth_t>)>();

  /// @defgroup command_interface Command Interface
  ///
  /// Control and configuration interface
  ///
  /// The command interface allows you to send textual commands to
  /// the synthesizer, to parse a command file, or to read commands
  /// from the stdin or other input streams (like a TCP socket).
  ///
  /// For a full list of available commands, type \c help in the
  /// \ref command_shell or send the same command via a command handler.
  /// Further documentation can be found at
  /// https://github.com/FluidSynth/fluidsynth/wiki/UserManual#shell-commands
  ///
  /// @{
  int fluid_get_stdin() {
    return _fluid_get_stdin();
  }

  late final _fluid_get_stdinPtr =
      _lookup<ffi.NativeFunction<fluid_istream_t Function()>>(
          'fluid_get_stdin');
  late final _fluid_get_stdin =
      _fluid_get_stdinPtr.asFunction<int Function()>();

  int fluid_get_stdout() {
    return _fluid_get_stdout();
  }

  late final _fluid_get_stdoutPtr =
      _lookup<ffi.NativeFunction<fluid_ostream_t Function()>>(
          'fluid_get_stdout');
  late final _fluid_get_stdout =
      _fluid_get_stdoutPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> fluid_get_userconf(
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _fluid_get_userconf(
      buf,
      len,
    );
  }

  late final _fluid_get_userconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('fluid_get_userconf');
  late final _fluid_get_userconf = _fluid_get_userconfPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> fluid_get_sysconf(
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _fluid_get_sysconf(
      buf,
      len,
    );
  }

  late final _fluid_get_sysconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('fluid_get_sysconf');
  late final _fluid_get_sysconf = _fluid_get_sysconfPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  /// @startlifecycle{Command Handler}
  ffi.Pointer<fluid_cmd_handler_t> new_fluid_cmd_handler(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_midi_router_t> router,
  ) {
    return _new_fluid_cmd_handler(
      synth,
      router,
    );
  }

  late final _new_fluid_cmd_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_cmd_handler_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_midi_router_t>)>>('new_fluid_cmd_handler');
  late final _new_fluid_cmd_handler = _new_fluid_cmd_handlerPtr.asFunction<
      ffi.Pointer<fluid_cmd_handler_t> Function(
          ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_midi_router_t>)>();

  ffi.Pointer<fluid_cmd_handler_t> new_fluid_cmd_handler2(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_midi_router_t> router,
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _new_fluid_cmd_handler2(
      settings,
      synth,
      router,
      player,
    );
  }

  late final _new_fluid_cmd_handler2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_cmd_handler_t> Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_midi_router_t>,
              ffi.Pointer<fluid_player_t>)>>('new_fluid_cmd_handler2');
  late final _new_fluid_cmd_handler2 = _new_fluid_cmd_handler2Ptr.asFunction<
      ffi.Pointer<fluid_cmd_handler_t> Function(
          ffi.Pointer<fluid_settings_t>,
          ffi.Pointer<fluid_synth_t>,
          ffi.Pointer<fluid_midi_router_t>,
          ffi.Pointer<fluid_player_t>)>();

  void delete_fluid_cmd_handler(
    ffi.Pointer<fluid_cmd_handler_t> handler,
  ) {
    return _delete_fluid_cmd_handler(
      handler,
    );
  }

  late final _delete_fluid_cmd_handlerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<fluid_cmd_handler_t>)>>(
      'delete_fluid_cmd_handler');
  late final _delete_fluid_cmd_handler = _delete_fluid_cmd_handlerPtr
      .asFunction<void Function(ffi.Pointer<fluid_cmd_handler_t>)>();

  /// @endlifecycle
  void fluid_cmd_handler_set_synth(
    ffi.Pointer<fluid_cmd_handler_t> handler,
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_cmd_handler_set_synth(
      handler,
      synth,
    );
  }

  late final _fluid_cmd_handler_set_synthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_cmd_handler_t>,
              ffi.Pointer<fluid_synth_t>)>>('fluid_cmd_handler_set_synth');
  late final _fluid_cmd_handler_set_synth =
      _fluid_cmd_handler_set_synthPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_cmd_handler_t>, ffi.Pointer<fluid_synth_t>)>();

  int fluid_command(
    ffi.Pointer<fluid_cmd_handler_t> handler,
    ffi.Pointer<ffi.Char> cmd,
    int out,
  ) {
    return _fluid_command(
      handler,
      cmd,
      out,
    );
  }

  late final _fluid_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_cmd_handler_t>,
              ffi.Pointer<ffi.Char>, fluid_ostream_t)>>('fluid_command');
  late final _fluid_command = _fluid_commandPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_cmd_handler_t>, ffi.Pointer<ffi.Char>, int)>();

  int fluid_source(
    ffi.Pointer<fluid_cmd_handler_t> handler,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _fluid_source(
      handler,
      filename,
    );
  }

  late final _fluid_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_cmd_handler_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_source');
  late final _fluid_source = _fluid_sourcePtr.asFunction<
      int Function(ffi.Pointer<fluid_cmd_handler_t>, ffi.Pointer<ffi.Char>)>();

  /// @startlifecycle{Command Shell}
  ffi.Pointer<fluid_shell_t> new_fluid_shell(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<fluid_cmd_handler_t> handler,
    int in1,
    int out,
    int thread,
  ) {
    return _new_fluid_shell(
      settings,
      handler,
      in1,
      out,
      thread,
    );
  }

  late final _new_fluid_shellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_shell_t> Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<fluid_cmd_handler_t>,
              fluid_istream_t,
              fluid_ostream_t,
              ffi.Int)>>('new_fluid_shell');
  late final _new_fluid_shell = _new_fluid_shellPtr.asFunction<
      ffi.Pointer<fluid_shell_t> Function(ffi.Pointer<fluid_settings_t>,
          ffi.Pointer<fluid_cmd_handler_t>, int, int, int)>();

  void fluid_usershell(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<fluid_cmd_handler_t> handler,
  ) {
    return _fluid_usershell(
      settings,
      handler,
    );
  }

  late final _fluid_usershellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<fluid_cmd_handler_t>)>>('fluid_usershell');
  late final _fluid_usershell = _fluid_usershellPtr.asFunction<
      void Function(
          ffi.Pointer<fluid_settings_t>, ffi.Pointer<fluid_cmd_handler_t>)>();

  void delete_fluid_shell(
    ffi.Pointer<fluid_shell_t> shell,
  ) {
    return _delete_fluid_shell(
      shell,
    );
  }

  late final _delete_fluid_shellPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_shell_t>)>>(
      'delete_fluid_shell');
  late final _delete_fluid_shell = _delete_fluid_shellPtr
      .asFunction<void Function(ffi.Pointer<fluid_shell_t>)>();

  /// @startlifecycle{Command Server}
  ffi.Pointer<fluid_server_t> new_fluid_server(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_midi_router_t> router,
  ) {
    return _new_fluid_server(
      settings,
      synth,
      router,
    );
  }

  late final _new_fluid_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_server_t> Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_midi_router_t>)>>('new_fluid_server');
  late final _new_fluid_server = _new_fluid_serverPtr.asFunction<
      ffi.Pointer<fluid_server_t> Function(ffi.Pointer<fluid_settings_t>,
          ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_midi_router_t>)>();

  ffi.Pointer<fluid_server_t> new_fluid_server2(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_midi_router_t> router,
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _new_fluid_server2(
      settings,
      synth,
      router,
      player,
    );
  }

  late final _new_fluid_server2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_server_t> Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_midi_router_t>,
              ffi.Pointer<fluid_player_t>)>>('new_fluid_server2');
  late final _new_fluid_server2 = _new_fluid_server2Ptr.asFunction<
      ffi.Pointer<fluid_server_t> Function(
          ffi.Pointer<fluid_settings_t>,
          ffi.Pointer<fluid_synth_t>,
          ffi.Pointer<fluid_midi_router_t>,
          ffi.Pointer<fluid_player_t>)>();

  void delete_fluid_server(
    ffi.Pointer<fluid_server_t> server,
  ) {
    return _delete_fluid_server(
      server,
    );
  }

  late final _delete_fluid_serverPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_server_t>)>>(
      'delete_fluid_server');
  late final _delete_fluid_server = _delete_fluid_serverPtr
      .asFunction<void Function(ffi.Pointer<fluid_server_t>)>();

  int fluid_server_join(
    ffi.Pointer<fluid_server_t> server,
  ) {
    return _fluid_server_join(
      server,
    );
  }

  late final _fluid_server_joinPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_server_t>)>>(
      'fluid_server_join');
  late final _fluid_server_join = _fluid_server_joinPtr
      .asFunction<int Function(ffi.Pointer<fluid_server_t>)>();

  /// @startlifecycle{SoundFont Loader}
  ffi.Pointer<fluid_sfloader_t> new_fluid_sfloader(
    fluid_sfloader_load_t load,
    fluid_sfloader_free_t free,
  ) {
    return _new_fluid_sfloader(
      load,
      free,
    );
  }

  late final _new_fluid_sfloaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfloader_t> Function(fluid_sfloader_load_t,
              fluid_sfloader_free_t)>>('new_fluid_sfloader');
  late final _new_fluid_sfloader = _new_fluid_sfloaderPtr.asFunction<
      ffi.Pointer<fluid_sfloader_t> Function(
          fluid_sfloader_load_t, fluid_sfloader_free_t)>();

  void delete_fluid_sfloader(
    ffi.Pointer<fluid_sfloader_t> loader,
  ) {
    return _delete_fluid_sfloader(
      loader,
    );
  }

  late final _delete_fluid_sfloaderPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_sfloader_t>)>>(
      'delete_fluid_sfloader');
  late final _delete_fluid_sfloader = _delete_fluid_sfloaderPtr
      .asFunction<void Function(ffi.Pointer<fluid_sfloader_t>)>();

  ffi.Pointer<fluid_sfloader_t> new_fluid_defsfloader(
    ffi.Pointer<fluid_settings_t> settings,
  ) {
    return _new_fluid_defsfloader(
      settings,
    );
  }

  late final _new_fluid_defsfloaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfloader_t> Function(
              ffi.Pointer<fluid_settings_t>)>>('new_fluid_defsfloader');
  late final _new_fluid_defsfloader = _new_fluid_defsfloaderPtr.asFunction<
      ffi.Pointer<fluid_sfloader_t> Function(ffi.Pointer<fluid_settings_t>)>();

  int fluid_sfloader_set_callbacks(
    ffi.Pointer<fluid_sfloader_t> loader,
    fluid_sfloader_callback_open_t open,
    fluid_sfloader_callback_read_t read,
    fluid_sfloader_callback_seek_t seek,
    fluid_sfloader_callback_tell_t tell,
    fluid_sfloader_callback_close_t close,
  ) {
    return _fluid_sfloader_set_callbacks(
      loader,
      open,
      read,
      seek,
      tell,
      close,
    );
  }

  late final _fluid_sfloader_set_callbacksPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<fluid_sfloader_t>,
                  fluid_sfloader_callback_open_t,
                  fluid_sfloader_callback_read_t,
                  fluid_sfloader_callback_seek_t,
                  fluid_sfloader_callback_tell_t,
                  fluid_sfloader_callback_close_t)>>(
      'fluid_sfloader_set_callbacks');
  late final _fluid_sfloader_set_callbacks =
      _fluid_sfloader_set_callbacksPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_sfloader_t>,
              fluid_sfloader_callback_open_t,
              fluid_sfloader_callback_read_t,
              fluid_sfloader_callback_seek_t,
              fluid_sfloader_callback_tell_t,
              fluid_sfloader_callback_close_t)>();

  int fluid_sfloader_set_data(
    ffi.Pointer<fluid_sfloader_t> loader,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_sfloader_set_data(
      loader,
      data,
    );
  }

  late final _fluid_sfloader_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sfloader_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_sfloader_set_data');
  late final _fluid_sfloader_set_data = _fluid_sfloader_set_dataPtr.asFunction<
      int Function(ffi.Pointer<fluid_sfloader_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> fluid_sfloader_get_data(
    ffi.Pointer<fluid_sfloader_t> loader,
  ) {
    return _fluid_sfloader_get_data(
      loader,
    );
  }

  late final _fluid_sfloader_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<fluid_sfloader_t>)>>('fluid_sfloader_get_data');
  late final _fluid_sfloader_get_data = _fluid_sfloader_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<fluid_sfloader_t>)>();

  /// @startlifecycle{SoundFont}
  ffi.Pointer<fluid_sfont_t> new_fluid_sfont(
    fluid_sfont_get_name_t get_name,
    fluid_sfont_get_preset_t get_preset,
    fluid_sfont_iteration_start_t iter_start,
    fluid_sfont_iteration_next_t iter_next,
    fluid_sfont_free_t free,
  ) {
    return _new_fluid_sfont(
      get_name,
      get_preset,
      iter_start,
      iter_next,
      free,
    );
  }

  late final _new_fluid_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(
              fluid_sfont_get_name_t,
              fluid_sfont_get_preset_t,
              fluid_sfont_iteration_start_t,
              fluid_sfont_iteration_next_t,
              fluid_sfont_free_t)>>('new_fluid_sfont');
  late final _new_fluid_sfont = _new_fluid_sfontPtr.asFunction<
      ffi.Pointer<fluid_sfont_t> Function(
          fluid_sfont_get_name_t,
          fluid_sfont_get_preset_t,
          fluid_sfont_iteration_start_t,
          fluid_sfont_iteration_next_t,
          fluid_sfont_free_t)>();

  int delete_fluid_sfont(
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _delete_fluid_sfont(
      sfont,
    );
  }

  late final _delete_fluid_sfontPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sfont_t>)>>(
          'delete_fluid_sfont');
  late final _delete_fluid_sfont = _delete_fluid_sfontPtr
      .asFunction<int Function(ffi.Pointer<fluid_sfont_t>)>();

  /// @endlifecycle
  int fluid_sfont_set_data(
    ffi.Pointer<fluid_sfont_t> sfont,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_sfont_set_data(
      sfont,
      data,
    );
  }

  late final _fluid_sfont_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sfont_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_sfont_set_data');
  late final _fluid_sfont_set_data = _fluid_sfont_set_dataPtr.asFunction<
      int Function(ffi.Pointer<fluid_sfont_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> fluid_sfont_get_data(
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_sfont_get_data(
      sfont,
    );
  }

  late final _fluid_sfont_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<fluid_sfont_t>)>>('fluid_sfont_get_data');
  late final _fluid_sfont_get_data = _fluid_sfont_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<fluid_sfont_t>)>();

  int fluid_sfont_get_id(
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_sfont_get_id(
      sfont,
    );
  }

  late final _fluid_sfont_get_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sfont_t>)>>(
          'fluid_sfont_get_id');
  late final _fluid_sfont_get_id = _fluid_sfont_get_idPtr
      .asFunction<int Function(ffi.Pointer<fluid_sfont_t>)>();

  ffi.Pointer<ffi.Char> fluid_sfont_get_name(
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_sfont_get_name(
      sfont,
    );
  }

  late final _fluid_sfont_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_sfont_t>)>>('fluid_sfont_get_name');
  late final _fluid_sfont_get_name = _fluid_sfont_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_sfont_t>)>();

  ffi.Pointer<fluid_preset_t> fluid_sfont_get_preset(
    ffi.Pointer<fluid_sfont_t> sfont,
    int bank,
    int prenum,
  ) {
    return _fluid_sfont_get_preset(
      sfont,
      bank,
      prenum,
    );
  }

  late final _fluid_sfont_get_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(ffi.Pointer<fluid_sfont_t>,
              ffi.Int, ffi.Int)>>('fluid_sfont_get_preset');
  late final _fluid_sfont_get_preset = _fluid_sfont_get_presetPtr.asFunction<
      ffi.Pointer<fluid_preset_t> Function(
          ffi.Pointer<fluid_sfont_t>, int, int)>();

  void fluid_sfont_iteration_start(
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_sfont_iteration_start(
      sfont,
    );
  }

  late final _fluid_sfont_iteration_startPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_sfont_t>)>>(
      'fluid_sfont_iteration_start');
  late final _fluid_sfont_iteration_start = _fluid_sfont_iteration_startPtr
      .asFunction<void Function(ffi.Pointer<fluid_sfont_t>)>();

  ffi.Pointer<fluid_preset_t> fluid_sfont_iteration_next(
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_sfont_iteration_next(
      sfont,
    );
  }

  late final _fluid_sfont_iteration_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(
              ffi.Pointer<fluid_sfont_t>)>>('fluid_sfont_iteration_next');
  late final _fluid_sfont_iteration_next =
      _fluid_sfont_iteration_nextPtr.asFunction<
          ffi.Pointer<fluid_preset_t> Function(ffi.Pointer<fluid_sfont_t>)>();

  /// @startlifecycle{Preset}
  ffi.Pointer<fluid_preset_t> new_fluid_preset(
    ffi.Pointer<fluid_sfont_t> parent_sfont,
    fluid_preset_get_name_t get_name,
    fluid_preset_get_banknum_t get_bank,
    fluid_preset_get_num_t get_num,
    fluid_preset_noteon_t noteon,
    fluid_preset_free_t free,
  ) {
    return _new_fluid_preset(
      parent_sfont,
      get_name,
      get_bank,
      get_num,
      noteon,
      free,
    );
  }

  late final _new_fluid_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(
              ffi.Pointer<fluid_sfont_t>,
              fluid_preset_get_name_t,
              fluid_preset_get_banknum_t,
              fluid_preset_get_num_t,
              fluid_preset_noteon_t,
              fluid_preset_free_t)>>('new_fluid_preset');
  late final _new_fluid_preset = _new_fluid_presetPtr.asFunction<
      ffi.Pointer<fluid_preset_t> Function(
          ffi.Pointer<fluid_sfont_t>,
          fluid_preset_get_name_t,
          fluid_preset_get_banknum_t,
          fluid_preset_get_num_t,
          fluid_preset_noteon_t,
          fluid_preset_free_t)>();

  void delete_fluid_preset(
    ffi.Pointer<fluid_preset_t> preset,
  ) {
    return _delete_fluid_preset(
      preset,
    );
  }

  late final _delete_fluid_presetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_preset_t>)>>(
      'delete_fluid_preset');
  late final _delete_fluid_preset = _delete_fluid_presetPtr
      .asFunction<void Function(ffi.Pointer<fluid_preset_t>)>();

  /// @endlifecycle
  int fluid_preset_set_data(
    ffi.Pointer<fluid_preset_t> preset,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_preset_set_data(
      preset,
      data,
    );
  }

  late final _fluid_preset_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_preset_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_preset_set_data');
  late final _fluid_preset_set_data = _fluid_preset_set_dataPtr.asFunction<
      int Function(ffi.Pointer<fluid_preset_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> fluid_preset_get_data(
    ffi.Pointer<fluid_preset_t> preset,
  ) {
    return _fluid_preset_get_data(
      preset,
    );
  }

  late final _fluid_preset_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<fluid_preset_t>)>>('fluid_preset_get_data');
  late final _fluid_preset_get_data = _fluid_preset_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<fluid_preset_t>)>();

  ffi.Pointer<ffi.Char> fluid_preset_get_name(
    ffi.Pointer<fluid_preset_t> preset,
  ) {
    return _fluid_preset_get_name(
      preset,
    );
  }

  late final _fluid_preset_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_preset_t>)>>('fluid_preset_get_name');
  late final _fluid_preset_get_name = _fluid_preset_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_preset_t>)>();

  int fluid_preset_get_banknum(
    ffi.Pointer<fluid_preset_t> preset,
  ) {
    return _fluid_preset_get_banknum(
      preset,
    );
  }

  late final _fluid_preset_get_banknumPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_preset_t>)>>(
      'fluid_preset_get_banknum');
  late final _fluid_preset_get_banknum = _fluid_preset_get_banknumPtr
      .asFunction<int Function(ffi.Pointer<fluid_preset_t>)>();

  int fluid_preset_get_num(
    ffi.Pointer<fluid_preset_t> preset,
  ) {
    return _fluid_preset_get_num(
      preset,
    );
  }

  late final _fluid_preset_get_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_preset_t>)>>(
      'fluid_preset_get_num');
  late final _fluid_preset_get_num = _fluid_preset_get_numPtr
      .asFunction<int Function(ffi.Pointer<fluid_preset_t>)>();

  ffi.Pointer<fluid_sfont_t> fluid_preset_get_sfont(
    ffi.Pointer<fluid_preset_t> preset,
  ) {
    return _fluid_preset_get_sfont(
      preset,
    );
  }

  late final _fluid_preset_get_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(
              ffi.Pointer<fluid_preset_t>)>>('fluid_preset_get_sfont');
  late final _fluid_preset_get_sfont = _fluid_preset_get_sfontPtr.asFunction<
      ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_preset_t>)>();

  /// @startlifecycle{Sample}
  ffi.Pointer<fluid_sample_t> new_fluid_sample() {
    return _new_fluid_sample();
  }

  late final _new_fluid_samplePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_sample_t> Function()>>(
          'new_fluid_sample');
  late final _new_fluid_sample =
      _new_fluid_samplePtr.asFunction<ffi.Pointer<fluid_sample_t> Function()>();

  void delete_fluid_sample(
    ffi.Pointer<fluid_sample_t> sample,
  ) {
    return _delete_fluid_sample(
      sample,
    );
  }

  late final _delete_fluid_samplePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_sample_t>)>>(
      'delete_fluid_sample');
  late final _delete_fluid_sample = _delete_fluid_samplePtr
      .asFunction<void Function(ffi.Pointer<fluid_sample_t>)>();

  /// @endlifecycle
  int fluid_sample_sizeof() {
    return _fluid_sample_sizeof();
  }

  late final _fluid_sample_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('fluid_sample_sizeof');
  late final _fluid_sample_sizeof =
      _fluid_sample_sizeofPtr.asFunction<int Function()>();

  int fluid_sample_set_name(
    ffi.Pointer<fluid_sample_t> sample,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_sample_set_name(
      sample,
      name,
    );
  }

  late final _fluid_sample_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sample_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_sample_set_name');
  late final _fluid_sample_set_name = _fluid_sample_set_namePtr.asFunction<
      int Function(ffi.Pointer<fluid_sample_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_sample_set_sound_data(
    ffi.Pointer<fluid_sample_t> sample,
    ffi.Pointer<ffi.Short> data,
    ffi.Pointer<ffi.Char> data24,
    int nbframes,
    int sample_rate,
    int copy_data,
  ) {
    return _fluid_sample_set_sound_data(
      sample,
      data,
      data24,
      nbframes,
      sample_rate,
      copy_data,
    );
  }

  late final _fluid_sample_set_sound_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_sample_t>,
              ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Short)>>('fluid_sample_set_sound_data');
  late final _fluid_sample_set_sound_data =
      _fluid_sample_set_sound_dataPtr.asFunction<
          int Function(ffi.Pointer<fluid_sample_t>, ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Char>, int, int, int)>();

  int fluid_sample_set_loop(
    ffi.Pointer<fluid_sample_t> sample,
    int loop_start,
    int loop_end,
  ) {
    return _fluid_sample_set_loop(
      sample,
      loop_start,
      loop_end,
    );
  }

  late final _fluid_sample_set_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sample_t>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('fluid_sample_set_loop');
  late final _fluid_sample_set_loop = _fluid_sample_set_loopPtr
      .asFunction<int Function(ffi.Pointer<fluid_sample_t>, int, int)>();

  int fluid_sample_set_pitch(
    ffi.Pointer<fluid_sample_t> sample,
    int root_key,
    int fine_tune,
  ) {
    return _fluid_sample_set_pitch(
      sample,
      root_key,
      fine_tune,
    );
  }

  late final _fluid_sample_set_pitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sample_t>, ffi.Int,
              ffi.Int)>>('fluid_sample_set_pitch');
  late final _fluid_sample_set_pitch = _fluid_sample_set_pitchPtr
      .asFunction<int Function(ffi.Pointer<fluid_sample_t>, int, int)>();

  /// @startlifecycle{Audio Driver}
  ffi.Pointer<fluid_audio_driver_t> new_fluid_audio_driver(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _new_fluid_audio_driver(
      settings,
      synth,
    );
  }

  late final _new_fluid_audio_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_audio_driver_t> Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<fluid_synth_t>)>>('new_fluid_audio_driver');
  late final _new_fluid_audio_driver = _new_fluid_audio_driverPtr.asFunction<
      ffi.Pointer<fluid_audio_driver_t> Function(
          ffi.Pointer<fluid_settings_t>, ffi.Pointer<fluid_synth_t>)>();

  ffi.Pointer<fluid_audio_driver_t> new_fluid_audio_driver2(
    ffi.Pointer<fluid_settings_t> settings,
    fluid_audio_func_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _new_fluid_audio_driver2(
      settings,
      func,
      data,
    );
  }

  late final _new_fluid_audio_driver2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_audio_driver_t> Function(
              ffi.Pointer<fluid_settings_t>,
              fluid_audio_func_t,
              ffi.Pointer<ffi.Void>)>>('new_fluid_audio_driver2');
  late final _new_fluid_audio_driver2 = _new_fluid_audio_driver2Ptr.asFunction<
      ffi.Pointer<fluid_audio_driver_t> Function(ffi.Pointer<fluid_settings_t>,
          fluid_audio_func_t, ffi.Pointer<ffi.Void>)>();

  void delete_fluid_audio_driver(
    ffi.Pointer<fluid_audio_driver_t> driver,
  ) {
    return _delete_fluid_audio_driver(
      driver,
    );
  }

  late final _delete_fluid_audio_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_audio_driver_t>)>>('delete_fluid_audio_driver');
  late final _delete_fluid_audio_driver = _delete_fluid_audio_driverPtr
      .asFunction<void Function(ffi.Pointer<fluid_audio_driver_t>)>();

  /// @endlifecycle
  int fluid_audio_driver_register(
    ffi.Pointer<ffi.Pointer<ffi.Char>> adrivers,
  ) {
    return _fluid_audio_driver_register(
      adrivers,
    );
  }

  late final _fluid_audio_driver_registerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'fluid_audio_driver_register');
  late final _fluid_audio_driver_register = _fluid_audio_driver_registerPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// @startlifecycle{File Renderer}
  ffi.Pointer<fluid_file_renderer_t> new_fluid_file_renderer(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _new_fluid_file_renderer(
      synth,
    );
  }

  late final _new_fluid_file_rendererPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_file_renderer_t> Function(
              ffi.Pointer<fluid_synth_t>)>>('new_fluid_file_renderer');
  late final _new_fluid_file_renderer = _new_fluid_file_rendererPtr.asFunction<
      ffi.Pointer<fluid_file_renderer_t> Function(
          ffi.Pointer<fluid_synth_t>)>();

  void delete_fluid_file_renderer(
    ffi.Pointer<fluid_file_renderer_t> dev,
  ) {
    return _delete_fluid_file_renderer(
      dev,
    );
  }

  late final _delete_fluid_file_rendererPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<fluid_file_renderer_t>)>>(
      'delete_fluid_file_renderer');
  late final _delete_fluid_file_renderer = _delete_fluid_file_rendererPtr
      .asFunction<void Function(ffi.Pointer<fluid_file_renderer_t>)>();

  /// @endlifecycle
  int fluid_file_renderer_process_block(
    ffi.Pointer<fluid_file_renderer_t> dev,
  ) {
    return _fluid_file_renderer_process_block(
      dev,
    );
  }

  late final _fluid_file_renderer_process_blockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<fluid_file_renderer_t>)>>(
      'fluid_file_renderer_process_block');
  late final _fluid_file_renderer_process_block =
      _fluid_file_renderer_process_blockPtr
          .asFunction<int Function(ffi.Pointer<fluid_file_renderer_t>)>();

  int fluid_file_set_encoding_quality(
    ffi.Pointer<fluid_file_renderer_t> dev,
    double q,
  ) {
    return _fluid_file_set_encoding_quality(
      dev,
      q,
    );
  }

  late final _fluid_file_set_encoding_qualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_file_renderer_t>,
              ffi.Double)>>('fluid_file_set_encoding_quality');
  late final _fluid_file_set_encoding_quality =
      _fluid_file_set_encoding_qualityPtr.asFunction<
          int Function(ffi.Pointer<fluid_file_renderer_t>, double)>();

  /// Event alloc/free */
  /// /** @startlifecycle{Sequencer Event}
  ffi.Pointer<fluid_event_t> new_fluid_event() {
    return _new_fluid_event();
  }

  late final _new_fluid_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_event_t> Function()>>(
          'new_fluid_event');
  late final _new_fluid_event =
      _new_fluid_eventPtr.asFunction<ffi.Pointer<fluid_event_t> Function()>();

  void delete_fluid_event(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _delete_fluid_event(
      evt,
    );
  }

  late final _delete_fluid_eventPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_event_t>)>>(
      'delete_fluid_event');
  late final _delete_fluid_event = _delete_fluid_eventPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>)>();

  /// Initializing events
  void fluid_event_set_source(
    ffi.Pointer<fluid_event_t> evt,
    int src,
  ) {
    return _fluid_event_set_source(
      evt,
      src,
    );
  }

  late final _fluid_event_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>,
              fluid_seq_id_t)>>('fluid_event_set_source');
  late final _fluid_event_set_source = _fluid_event_set_sourcePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int)>();

  void fluid_event_set_dest(
    ffi.Pointer<fluid_event_t> evt,
    int dest,
  ) {
    return _fluid_event_set_dest(
      evt,
      dest,
    );
  }

  late final _fluid_event_set_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>,
              fluid_seq_id_t)>>('fluid_event_set_dest');
  late final _fluid_event_set_dest = _fluid_event_set_destPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int)>();

  /// Timer events
  void fluid_event_timer(
    ffi.Pointer<fluid_event_t> evt,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_event_timer(
      evt,
      data,
    );
  }

  late final _fluid_event_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_event_timer');
  late final _fluid_event_timer = _fluid_event_timerPtr.asFunction<
      void Function(ffi.Pointer<fluid_event_t>, ffi.Pointer<ffi.Void>)>();

  /// Note events
  void fluid_event_note(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int key,
    int vel,
    int duration,
  ) {
    return _fluid_event_note(
      evt,
      channel,
      key,
      vel,
      duration,
    );
  }

  late final _fluid_event_notePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int, ffi.Short,
              ffi.Short, ffi.UnsignedInt)>>('fluid_event_note');
  late final _fluid_event_note = _fluid_event_notePtr.asFunction<
      void Function(ffi.Pointer<fluid_event_t>, int, int, int, int)>();

  void fluid_event_noteon(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int key,
    int vel,
  ) {
    return _fluid_event_noteon(
      evt,
      channel,
      key,
      vel,
    );
  }

  late final _fluid_event_noteonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int, ffi.Short,
              ffi.Short)>>('fluid_event_noteon');
  late final _fluid_event_noteon = _fluid_event_noteonPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int, int)>();

  void fluid_event_noteoff(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int key,
  ) {
    return _fluid_event_noteoff(
      evt,
      channel,
      key,
    );
  }

  late final _fluid_event_noteoffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Short)>>('fluid_event_noteoff');
  late final _fluid_event_noteoff = _fluid_event_noteoffPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_all_sounds_off(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
  ) {
    return _fluid_event_all_sounds_off(
      evt,
      channel,
    );
  }

  late final _fluid_event_all_sounds_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>,
              ffi.Int)>>('fluid_event_all_sounds_off');
  late final _fluid_event_all_sounds_off = _fluid_event_all_sounds_offPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int)>();

  void fluid_event_all_notes_off(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
  ) {
    return _fluid_event_all_notes_off(
      evt,
      channel,
    );
  }

  late final _fluid_event_all_notes_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>,
              ffi.Int)>>('fluid_event_all_notes_off');
  late final _fluid_event_all_notes_off = _fluid_event_all_notes_offPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int)>();

  /// Instrument selection
  void fluid_event_bank_select(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int bank_num,
  ) {
    return _fluid_event_bank_select(
      evt,
      channel,
      bank_num,
    );
  }

  late final _fluid_event_bank_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Short)>>('fluid_event_bank_select');
  late final _fluid_event_bank_select = _fluid_event_bank_selectPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_program_change(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int preset_num,
  ) {
    return _fluid_event_program_change(
      evt,
      channel,
      preset_num,
    );
  }

  late final _fluid_event_program_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_program_change');
  late final _fluid_event_program_change = _fluid_event_program_changePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_program_select(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int sfont_id,
    int bank_num,
    int preset_num,
  ) {
    return _fluid_event_program_select(
      evt,
      channel,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_event_program_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_event_t>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Short,
              ffi.Short)>>('fluid_event_program_select');
  late final _fluid_event_program_select =
      _fluid_event_program_selectPtr.asFunction<
          void Function(ffi.Pointer<fluid_event_t>, int, int, int, int)>();

  /// Real-time generic instrument controllers
  void fluid_event_control_change(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int control,
    int val,
  ) {
    return _fluid_event_control_change(
      evt,
      channel,
      control,
      val,
    );
  }

  late final _fluid_event_control_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int, ffi.Short,
              ffi.Int)>>('fluid_event_control_change');
  late final _fluid_event_control_change = _fluid_event_control_changePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int, int)>();

  /// Real-time instrument controllers shortcuts
  void fluid_event_pitch_bend(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_pitch_bend(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_pitch_bendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_pitch_bend');
  late final _fluid_event_pitch_bend = _fluid_event_pitch_bendPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_pitch_wheelsens(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_pitch_wheelsens(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_pitch_wheelsensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_pitch_wheelsens');
  late final _fluid_event_pitch_wheelsens = _fluid_event_pitch_wheelsensPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_modulation(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_modulation(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_modulationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_modulation');
  late final _fluid_event_modulation = _fluid_event_modulationPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_sustain(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_sustain(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_sustainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_sustain');
  late final _fluid_event_sustain = _fluid_event_sustainPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_pan(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_pan(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_panPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_pan');
  late final _fluid_event_pan = _fluid_event_panPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_volume(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_volume(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_volume');
  late final _fluid_event_volume = _fluid_event_volumePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_reverb_send(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_reverb_send(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_reverb_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_reverb_send');
  late final _fluid_event_reverb_send = _fluid_event_reverb_sendPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_chorus_send(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_chorus_send(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_chorus_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_chorus_send');
  late final _fluid_event_chorus_send = _fluid_event_chorus_sendPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_key_pressure(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int key,
    int val,
  ) {
    return _fluid_event_key_pressure(
      evt,
      channel,
      key,
      val,
    );
  }

  late final _fluid_event_key_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int, ffi.Short,
              ffi.Int)>>('fluid_event_key_pressure');
  late final _fluid_event_key_pressure = _fluid_event_key_pressurePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int, int)>();

  void fluid_event_channel_pressure(
    ffi.Pointer<fluid_event_t> evt,
    int channel,
    int val,
  ) {
    return _fluid_event_channel_pressure(
      evt,
      channel,
      val,
    );
  }

  late final _fluid_event_channel_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_event_t>, ffi.Int,
              ffi.Int)>>('fluid_event_channel_pressure');
  late final _fluid_event_channel_pressure = _fluid_event_channel_pressurePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, int, int)>();

  void fluid_event_system_reset(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_system_reset(
      evt,
    );
  }

  late final _fluid_event_system_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_system_reset');
  late final _fluid_event_system_reset = _fluid_event_system_resetPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>)>();

  /// Only when unregistering clients
  void fluid_event_unregistering(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_unregistering(
      evt,
    );
  }

  late final _fluid_event_unregisteringPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_unregistering');
  late final _fluid_event_unregistering = _fluid_event_unregisteringPtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>)>();

  void fluid_event_scale(
    ffi.Pointer<fluid_event_t> evt,
    double new_scale,
  ) {
    return _fluid_event_scale(
      evt,
      new_scale,
    );
  }

  late final _fluid_event_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_event_t>, ffi.Double)>>('fluid_event_scale');
  late final _fluid_event_scale = _fluid_event_scalePtr
      .asFunction<void Function(ffi.Pointer<fluid_event_t>, double)>();

  int fluid_event_from_midi_event(
    ffi.Pointer<fluid_event_t> arg0,
    ffi.Pointer<fluid_midi_event_t> arg1,
  ) {
    return _fluid_event_from_midi_event(
      arg0,
      arg1,
    );
  }

  late final _fluid_event_from_midi_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_event_t>,
              ffi.Pointer<fluid_midi_event_t>)>>('fluid_event_from_midi_event');
  late final _fluid_event_from_midi_event =
      _fluid_event_from_midi_eventPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_event_t>, ffi.Pointer<fluid_midi_event_t>)>();

  /// Accessing event data
  int fluid_event_get_type(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_type(
      evt,
    );
  }

  late final _fluid_event_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_event_t>)>>(
          'fluid_event_get_type');
  late final _fluid_event_get_type = _fluid_event_get_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_source(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_source(
      evt,
    );
  }

  late final _fluid_event_get_sourcePtr = _lookup<
          ffi
          .NativeFunction<fluid_seq_id_t Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_source');
  late final _fluid_event_get_source = _fluid_event_get_sourcePtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_dest(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_dest(
      evt,
    );
  }

  late final _fluid_event_get_destPtr = _lookup<
          ffi
          .NativeFunction<fluid_seq_id_t Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_dest');
  late final _fluid_event_get_dest = _fluid_event_get_destPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_channel(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_channel(
      evt,
    );
  }

  late final _fluid_event_get_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_event_t>)>>(
          'fluid_event_get_channel');
  late final _fluid_event_get_channel = _fluid_event_get_channelPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_key(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_key(
      evt,
    );
  }

  late final _fluid_event_get_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_key');
  late final _fluid_event_get_key = _fluid_event_get_keyPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_velocity(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_velocity(
      evt,
    );
  }

  late final _fluid_event_get_velocityPtr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_velocity');
  late final _fluid_event_get_velocity = _fluid_event_get_velocityPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_control(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_control(
      evt,
    );
  }

  late final _fluid_event_get_controlPtr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_control');
  late final _fluid_event_get_control = _fluid_event_get_controlPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_value(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_value(
      evt,
    );
  }

  late final _fluid_event_get_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_event_t>)>>(
          'fluid_event_get_value');
  late final _fluid_event_get_value = _fluid_event_get_valuePtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_program(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_program(
      evt,
    );
  }

  late final _fluid_event_get_programPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_event_t>)>>(
          'fluid_event_get_program');
  late final _fluid_event_get_program = _fluid_event_get_programPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  ffi.Pointer<ffi.Void> fluid_event_get_data(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_data(
      evt,
    );
  }

  late final _fluid_event_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<fluid_event_t>)>>('fluid_event_get_data');
  late final _fluid_event_get_data = _fluid_event_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_duration(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_duration(
      evt,
    );
  }

  late final _fluid_event_get_durationPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<fluid_event_t>)>>('fluid_event_get_duration');
  late final _fluid_event_get_duration = _fluid_event_get_durationPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_bank(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_bank(
      evt,
    );
  }

  late final _fluid_event_get_bankPtr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_bank');
  late final _fluid_event_get_bank = _fluid_event_get_bankPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_pitch(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_pitch(
      evt,
    );
  }

  late final _fluid_event_get_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_event_t>)>>(
          'fluid_event_get_pitch');
  late final _fluid_event_get_pitch = _fluid_event_get_pitchPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  double fluid_event_get_scale(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_scale(
      evt,
    );
  }

  late final _fluid_event_get_scalePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_event_t>)>>(
      'fluid_event_get_scale');
  late final _fluid_event_get_scale = _fluid_event_get_scalePtr
      .asFunction<double Function(ffi.Pointer<fluid_event_t>)>();

  int fluid_event_get_sfont_id(
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_event_get_sfont_id(
      evt,
    );
  }

  late final _fluid_event_get_sfont_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<fluid_event_t>)>>('fluid_event_get_sfont_id');
  late final _fluid_event_get_sfont_id = _fluid_event_get_sfont_idPtr
      .asFunction<int Function(ffi.Pointer<fluid_event_t>)>();

  /// @defgroup midi_events MIDI Events
  /// @ingroup midi_input
  ///
  /// Functions to create, modify, query and delete MIDI events.
  ///
  /// These functions are intended to be used in MIDI routers and other filtering
  /// and processing functions in the MIDI event path. If you want to simply
  /// send MIDI messages to the synthesizer, you can use the more convenient
  /// \ref midi_messages interface.
  ///
  /// @{
  /// /
  /// /** @startlifecycle{MIDI Event}
  ffi.Pointer<fluid_midi_event_t> new_fluid_midi_event() {
    return _new_fluid_midi_event();
  }

  late final _new_fluid_midi_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_midi_event_t> Function()>>(
          'new_fluid_midi_event');
  late final _new_fluid_midi_event = _new_fluid_midi_eventPtr
      .asFunction<ffi.Pointer<fluid_midi_event_t> Function()>();

  void delete_fluid_midi_event(
    ffi.Pointer<fluid_midi_event_t> event,
  ) {
    return _delete_fluid_midi_event(
      event,
    );
  }

  late final _delete_fluid_midi_eventPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'delete_fluid_midi_event');
  late final _delete_fluid_midi_event = _delete_fluid_midi_eventPtr
      .asFunction<void Function(ffi.Pointer<fluid_midi_event_t>)>();

  /// @endlifecycle
  int fluid_midi_event_set_type(
    ffi.Pointer<fluid_midi_event_t> evt,
    int type,
  ) {
    return _fluid_midi_event_set_type(
      evt,
      type,
    );
  }

  late final _fluid_midi_event_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_type');
  late final _fluid_midi_event_set_type = _fluid_midi_event_set_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_type(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_type(
      evt,
    );
  }

  late final _fluid_midi_event_get_typePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_type');
  late final _fluid_midi_event_get_type = _fluid_midi_event_get_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_channel(
    ffi.Pointer<fluid_midi_event_t> evt,
    int chan,
  ) {
    return _fluid_midi_event_set_channel(
      evt,
      chan,
    );
  }

  late final _fluid_midi_event_set_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_channel');
  late final _fluid_midi_event_set_channel = _fluid_midi_event_set_channelPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_channel(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_channel(
      evt,
    );
  }

  late final _fluid_midi_event_get_channelPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_channel');
  late final _fluid_midi_event_get_channel = _fluid_midi_event_get_channelPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_get_key(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_key(
      evt,
    );
  }

  late final _fluid_midi_event_get_keyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_key');
  late final _fluid_midi_event_get_key = _fluid_midi_event_get_keyPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_key(
    ffi.Pointer<fluid_midi_event_t> evt,
    int key,
  ) {
    return _fluid_midi_event_set_key(
      evt,
      key,
    );
  }

  late final _fluid_midi_event_set_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_key');
  late final _fluid_midi_event_set_key = _fluid_midi_event_set_keyPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_velocity(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_velocity(
      evt,
    );
  }

  late final _fluid_midi_event_get_velocityPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_velocity');
  late final _fluid_midi_event_get_velocity = _fluid_midi_event_get_velocityPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_velocity(
    ffi.Pointer<fluid_midi_event_t> evt,
    int vel,
  ) {
    return _fluid_midi_event_set_velocity(
      evt,
      vel,
    );
  }

  late final _fluid_midi_event_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_velocity');
  late final _fluid_midi_event_set_velocity = _fluid_midi_event_set_velocityPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_control(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_control(
      evt,
    );
  }

  late final _fluid_midi_event_get_controlPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_control');
  late final _fluid_midi_event_get_control = _fluid_midi_event_get_controlPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_control(
    ffi.Pointer<fluid_midi_event_t> evt,
    int ctrl,
  ) {
    return _fluid_midi_event_set_control(
      evt,
      ctrl,
    );
  }

  late final _fluid_midi_event_set_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_control');
  late final _fluid_midi_event_set_control = _fluid_midi_event_set_controlPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_value(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_value(
      evt,
    );
  }

  late final _fluid_midi_event_get_valuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_value');
  late final _fluid_midi_event_get_value = _fluid_midi_event_get_valuePtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_value(
    ffi.Pointer<fluid_midi_event_t> evt,
    int val,
  ) {
    return _fluid_midi_event_set_value(
      evt,
      val,
    );
  }

  late final _fluid_midi_event_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_value');
  late final _fluid_midi_event_set_value = _fluid_midi_event_set_valuePtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_program(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_program(
      evt,
    );
  }

  late final _fluid_midi_event_get_programPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_program');
  late final _fluid_midi_event_get_program = _fluid_midi_event_get_programPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_program(
    ffi.Pointer<fluid_midi_event_t> evt,
    int val,
  ) {
    return _fluid_midi_event_set_program(
      evt,
      val,
    );
  }

  late final _fluid_midi_event_set_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_program');
  late final _fluid_midi_event_set_program = _fluid_midi_event_set_programPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_get_pitch(
    ffi.Pointer<fluid_midi_event_t> evt,
  ) {
    return _fluid_midi_event_get_pitch(
      evt,
    );
  }

  late final _fluid_midi_event_get_pitchPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_event_get_pitch');
  late final _fluid_midi_event_get_pitch = _fluid_midi_event_get_pitchPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_event_set_pitch(
    ffi.Pointer<fluid_midi_event_t> evt,
    int val,
  ) {
    return _fluid_midi_event_set_pitch(
      evt,
      val,
    );
  }

  late final _fluid_midi_event_set_pitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Int)>>('fluid_midi_event_set_pitch');
  late final _fluid_midi_event_set_pitch = _fluid_midi_event_set_pitchPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_event_t>, int)>();

  int fluid_midi_event_set_sysex(
    ffi.Pointer<fluid_midi_event_t> evt,
    ffi.Pointer<ffi.Void> data,
    int size,
    int dynamic1,
  ) {
    return _fluid_midi_event_set_sysex(
      evt,
      data,
      size,
      dynamic1,
    );
  }

  late final _fluid_midi_event_set_sysexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_midi_event_set_sysex');
  late final _fluid_midi_event_set_sysex =
      _fluid_midi_event_set_sysexPtr.asFunction<
          int Function(ffi.Pointer<fluid_midi_event_t>, ffi.Pointer<ffi.Void>,
              int, int)>();

  int fluid_midi_event_set_text(
    ffi.Pointer<fluid_midi_event_t> evt,
    ffi.Pointer<ffi.Void> data,
    int size,
    int dynamic1,
  ) {
    return _fluid_midi_event_set_text(
      evt,
      data,
      size,
      dynamic1,
    );
  }

  late final _fluid_midi_event_set_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_midi_event_set_text');
  late final _fluid_midi_event_set_text =
      _fluid_midi_event_set_textPtr.asFunction<
          int Function(ffi.Pointer<fluid_midi_event_t>, ffi.Pointer<ffi.Void>,
              int, int)>();

  int fluid_midi_event_get_text(
    ffi.Pointer<fluid_midi_event_t> evt,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Int> size,
  ) {
    return _fluid_midi_event_get_text(
      evt,
      data,
      size,
    );
  }

  late final _fluid_midi_event_get_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Int>)>>('fluid_midi_event_get_text');
  late final _fluid_midi_event_get_text =
      _fluid_midi_event_get_textPtr.asFunction<
          int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Int>)>();

  int fluid_midi_event_set_lyrics(
    ffi.Pointer<fluid_midi_event_t> evt,
    ffi.Pointer<ffi.Void> data,
    int size,
    int dynamic1,
  ) {
    return _fluid_midi_event_set_lyrics(
      evt,
      data,
      size,
      dynamic1,
    );
  }

  late final _fluid_midi_event_set_lyricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_midi_event_set_lyrics');
  late final _fluid_midi_event_set_lyrics =
      _fluid_midi_event_set_lyricsPtr.asFunction<
          int Function(ffi.Pointer<fluid_midi_event_t>, ffi.Pointer<ffi.Void>,
              int, int)>();

  int fluid_midi_event_get_lyrics(
    ffi.Pointer<fluid_midi_event_t> evt,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Int> size,
  ) {
    return _fluid_midi_event_get_lyrics(
      evt,
      data,
      size,
    );
  }

  late final _fluid_midi_event_get_lyricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Int>)>>('fluid_midi_event_get_lyrics');
  late final _fluid_midi_event_get_lyrics =
      _fluid_midi_event_get_lyricsPtr.asFunction<
          int Function(ffi.Pointer<fluid_midi_event_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Int>)>();

  /// @startlifecycle{MIDI Router}
  ffi.Pointer<fluid_midi_router_t> new_fluid_midi_router(
    ffi.Pointer<fluid_settings_t> settings,
    handle_midi_event_func_t handler,
    ffi.Pointer<ffi.Void> event_handler_data,
  ) {
    return _new_fluid_midi_router(
      settings,
      handler,
      event_handler_data,
    );
  }

  late final _new_fluid_midi_routerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_midi_router_t> Function(
              ffi.Pointer<fluid_settings_t>,
              handle_midi_event_func_t,
              ffi.Pointer<ffi.Void>)>>('new_fluid_midi_router');
  late final _new_fluid_midi_router = _new_fluid_midi_routerPtr.asFunction<
      ffi.Pointer<fluid_midi_router_t> Function(ffi.Pointer<fluid_settings_t>,
          handle_midi_event_func_t, ffi.Pointer<ffi.Void>)>();

  void delete_fluid_midi_router(
    ffi.Pointer<fluid_midi_router_t> handler,
  ) {
    return _delete_fluid_midi_router(
      handler,
    );
  }

  late final _delete_fluid_midi_routerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<fluid_midi_router_t>)>>(
      'delete_fluid_midi_router');
  late final _delete_fluid_midi_router = _delete_fluid_midi_routerPtr
      .asFunction<void Function(ffi.Pointer<fluid_midi_router_t>)>();

  /// @endlifecycle
  int fluid_midi_router_set_default_rules(
    ffi.Pointer<fluid_midi_router_t> router,
  ) {
    return _fluid_midi_router_set_default_rules(
      router,
    );
  }

  late final _fluid_midi_router_set_default_rulesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_router_t>)>>(
      'fluid_midi_router_set_default_rules');
  late final _fluid_midi_router_set_default_rules =
      _fluid_midi_router_set_default_rulesPtr
          .asFunction<int Function(ffi.Pointer<fluid_midi_router_t>)>();

  int fluid_midi_router_clear_rules(
    ffi.Pointer<fluid_midi_router_t> router,
  ) {
    return _fluid_midi_router_clear_rules(
      router,
    );
  }

  late final _fluid_midi_router_clear_rulesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_midi_router_t>)>>(
      'fluid_midi_router_clear_rules');
  late final _fluid_midi_router_clear_rules = _fluid_midi_router_clear_rulesPtr
      .asFunction<int Function(ffi.Pointer<fluid_midi_router_t>)>();

  int fluid_midi_router_add_rule(
    ffi.Pointer<fluid_midi_router_t> router,
    ffi.Pointer<fluid_midi_router_rule_t> rule,
    int type,
  ) {
    return _fluid_midi_router_add_rule(
      router,
      rule,
      type,
    );
  }

  late final _fluid_midi_router_add_rulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_midi_router_t>,
              ffi.Pointer<fluid_midi_router_rule_t>,
              ffi.Int)>>('fluid_midi_router_add_rule');
  late final _fluid_midi_router_add_rule =
      _fluid_midi_router_add_rulePtr.asFunction<
          int Function(ffi.Pointer<fluid_midi_router_t>,
              ffi.Pointer<fluid_midi_router_rule_t>, int)>();

  /// @startlifecycle{MIDI Router Rule}
  ffi.Pointer<fluid_midi_router_rule_t> new_fluid_midi_router_rule() {
    return _new_fluid_midi_router_rule();
  }

  late final _new_fluid_midi_router_rulePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<fluid_midi_router_rule_t> Function()>>(
      'new_fluid_midi_router_rule');
  late final _new_fluid_midi_router_rule = _new_fluid_midi_router_rulePtr
      .asFunction<ffi.Pointer<fluid_midi_router_rule_t> Function()>();

  void delete_fluid_midi_router_rule(
    ffi.Pointer<fluid_midi_router_rule_t> rule,
  ) {
    return _delete_fluid_midi_router_rule(
      rule,
    );
  }

  late final _delete_fluid_midi_router_rulePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<fluid_midi_router_rule_t>)>>(
      'delete_fluid_midi_router_rule');
  late final _delete_fluid_midi_router_rule = _delete_fluid_midi_router_rulePtr
      .asFunction<void Function(ffi.Pointer<fluid_midi_router_rule_t>)>();

  /// @endlifecycle
  void fluid_midi_router_rule_set_chan(
    ffi.Pointer<fluid_midi_router_rule_t> rule,
    int min,
    int max,
    double mul,
    int add,
  ) {
    return _fluid_midi_router_rule_set_chan(
      rule,
      min,
      max,
      mul,
      add,
    );
  }

  late final _fluid_midi_router_rule_set_chanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_midi_router_rule_t>, ffi.Int,
              ffi.Int, ffi.Float, ffi.Int)>>('fluid_midi_router_rule_set_chan');
  late final _fluid_midi_router_rule_set_chan =
      _fluid_midi_router_rule_set_chanPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_midi_router_rule_t>, int, int, double, int)>();

  void fluid_midi_router_rule_set_param1(
    ffi.Pointer<fluid_midi_router_rule_t> rule,
    int min,
    int max,
    double mul,
    int add,
  ) {
    return _fluid_midi_router_rule_set_param1(
      rule,
      min,
      max,
      mul,
      add,
    );
  }

  late final _fluid_midi_router_rule_set_param1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_midi_router_rule_t>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Int)>>('fluid_midi_router_rule_set_param1');
  late final _fluid_midi_router_rule_set_param1 =
      _fluid_midi_router_rule_set_param1Ptr.asFunction<
          void Function(
              ffi.Pointer<fluid_midi_router_rule_t>, int, int, double, int)>();

  void fluid_midi_router_rule_set_param2(
    ffi.Pointer<fluid_midi_router_rule_t> rule,
    int min,
    int max,
    double mul,
    int add,
  ) {
    return _fluid_midi_router_rule_set_param2(
      rule,
      min,
      max,
      mul,
      add,
    );
  }

  late final _fluid_midi_router_rule_set_param2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_midi_router_rule_t>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Int)>>('fluid_midi_router_rule_set_param2');
  late final _fluid_midi_router_rule_set_param2 =
      _fluid_midi_router_rule_set_param2Ptr.asFunction<
          void Function(
              ffi.Pointer<fluid_midi_router_rule_t>, int, int, double, int)>();

  int fluid_midi_router_handle_midi_event(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<fluid_midi_event_t> event,
  ) {
    return _fluid_midi_router_handle_midi_event(
      data,
      event,
    );
  }

  late final _fluid_midi_router_handle_midi_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_midi_router_handle_midi_event');
  late final _fluid_midi_router_handle_midi_event =
      _fluid_midi_router_handle_midi_eventPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_dump_prerouter(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<fluid_midi_event_t> event,
  ) {
    return _fluid_midi_dump_prerouter(
      data,
      event,
    );
  }

  late final _fluid_midi_dump_prerouterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<fluid_midi_event_t>)>>('fluid_midi_dump_prerouter');
  late final _fluid_midi_dump_prerouter =
      _fluid_midi_dump_prerouterPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>();

  int fluid_midi_dump_postrouter(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<fluid_midi_event_t> event,
  ) {
    return _fluid_midi_dump_postrouter(
      data,
      event,
    );
  }

  late final _fluid_midi_dump_postrouterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<fluid_midi_event_t>)>>('fluid_midi_dump_postrouter');
  late final _fluid_midi_dump_postrouter =
      _fluid_midi_dump_postrouterPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>();

  /// @startlifecycle{MIDI Driver}
  ffi.Pointer<fluid_midi_driver_t> new_fluid_midi_driver(
    ffi.Pointer<fluid_settings_t> settings,
    handle_midi_event_func_t handler,
    ffi.Pointer<ffi.Void> event_handler_data,
  ) {
    return _new_fluid_midi_driver(
      settings,
      handler,
      event_handler_data,
    );
  }

  late final _new_fluid_midi_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_midi_driver_t> Function(
              ffi.Pointer<fluid_settings_t>,
              handle_midi_event_func_t,
              ffi.Pointer<ffi.Void>)>>('new_fluid_midi_driver');
  late final _new_fluid_midi_driver = _new_fluid_midi_driverPtr.asFunction<
      ffi.Pointer<fluid_midi_driver_t> Function(ffi.Pointer<fluid_settings_t>,
          handle_midi_event_func_t, ffi.Pointer<ffi.Void>)>();

  void delete_fluid_midi_driver(
    ffi.Pointer<fluid_midi_driver_t> driver,
  ) {
    return _delete_fluid_midi_driver(
      driver,
    );
  }

  late final _delete_fluid_midi_driverPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<fluid_midi_driver_t>)>>(
      'delete_fluid_midi_driver');
  late final _delete_fluid_midi_driver = _delete_fluid_midi_driverPtr
      .asFunction<void Function(ffi.Pointer<fluid_midi_driver_t>)>();

  /// @startlifecycle{MIDI File Player}
  ffi.Pointer<fluid_player_t> new_fluid_player(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _new_fluid_player(
      synth,
    );
  }

  late final _new_fluid_playerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_player_t> Function(
              ffi.Pointer<fluid_synth_t>)>>('new_fluid_player');
  late final _new_fluid_player = _new_fluid_playerPtr.asFunction<
      ffi.Pointer<fluid_player_t> Function(ffi.Pointer<fluid_synth_t>)>();

  void delete_fluid_player(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _delete_fluid_player(
      player,
    );
  }

  late final _delete_fluid_playerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_player_t>)>>(
      'delete_fluid_player');
  late final _delete_fluid_player = _delete_fluid_playerPtr
      .asFunction<void Function(ffi.Pointer<fluid_player_t>)>();

  /// @endlifecycle
  int fluid_player_add(
    ffi.Pointer<fluid_player_t> player,
    ffi.Pointer<ffi.Char> midifile,
  ) {
    return _fluid_player_add(
      player,
      midifile,
    );
  }

  late final _fluid_player_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_player_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_player_add');
  late final _fluid_player_add = _fluid_player_addPtr.asFunction<
      int Function(ffi.Pointer<fluid_player_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_player_add_mem(
    ffi.Pointer<fluid_player_t> player,
    ffi.Pointer<ffi.Void> buffer,
    int len,
  ) {
    return _fluid_player_add_mem(
      player,
      buffer,
      len,
    );
  }

  late final _fluid_player_add_memPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_player_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('fluid_player_add_mem');
  late final _fluid_player_add_mem = _fluid_player_add_memPtr.asFunction<
      int Function(ffi.Pointer<fluid_player_t>, ffi.Pointer<ffi.Void>, int)>();

  int fluid_player_play(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_play(
      player,
    );
  }

  late final _fluid_player_playPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_play');
  late final _fluid_player_play = _fluid_player_playPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_stop(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_stop(
      player,
    );
  }

  late final _fluid_player_stopPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_stop');
  late final _fluid_player_stop = _fluid_player_stopPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_join(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_join(
      player,
    );
  }

  late final _fluid_player_joinPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_join');
  late final _fluid_player_join = _fluid_player_joinPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_set_loop(
    ffi.Pointer<fluid_player_t> player,
    int loop,
  ) {
    return _fluid_player_set_loop(
      player,
      loop,
    );
  }

  late final _fluid_player_set_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_player_t>, ffi.Int)>>('fluid_player_set_loop');
  late final _fluid_player_set_loop = _fluid_player_set_loopPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>, int)>();

  int fluid_player_set_tempo(
    ffi.Pointer<fluid_player_t> player,
    int tempo_type,
    double tempo,
  ) {
    return _fluid_player_set_tempo(
      player,
      tempo_type,
      tempo,
    );
  }

  late final _fluid_player_set_tempoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_player_t>, ffi.Int,
              ffi.Double)>>('fluid_player_set_tempo');
  late final _fluid_player_set_tempo = _fluid_player_set_tempoPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>, int, double)>();

  int fluid_player_set_midi_tempo(
    ffi.Pointer<fluid_player_t> player,
    int tempo,
  ) {
    return _fluid_player_set_midi_tempo(
      player,
      tempo,
    );
  }

  late final _fluid_player_set_midi_tempoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_player_t>,
              ffi.Int)>>('fluid_player_set_midi_tempo');
  late final _fluid_player_set_midi_tempo = _fluid_player_set_midi_tempoPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>, int)>();

  int fluid_player_set_bpm(
    ffi.Pointer<fluid_player_t> player,
    int bpm,
  ) {
    return _fluid_player_set_bpm(
      player,
      bpm,
    );
  }

  late final _fluid_player_set_bpmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_player_t>, ffi.Int)>>('fluid_player_set_bpm');
  late final _fluid_player_set_bpm = _fluid_player_set_bpmPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>, int)>();

  int fluid_player_set_playback_callback(
    ffi.Pointer<fluid_player_t> player,
    handle_midi_event_func_t handler,
    ffi.Pointer<ffi.Void> handler_data,
  ) {
    return _fluid_player_set_playback_callback(
      player,
      handler,
      handler_data,
    );
  }

  late final _fluid_player_set_playback_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_player_t>,
              handle_midi_event_func_t,
              ffi.Pointer<ffi.Void>)>>('fluid_player_set_playback_callback');
  late final _fluid_player_set_playback_callback =
      _fluid_player_set_playback_callbackPtr.asFunction<
          int Function(ffi.Pointer<fluid_player_t>, handle_midi_event_func_t,
              ffi.Pointer<ffi.Void>)>();

  int fluid_player_set_tick_callback(
    ffi.Pointer<fluid_player_t> player,
    handle_midi_tick_func_t handler,
    ffi.Pointer<ffi.Void> handler_data,
  ) {
    return _fluid_player_set_tick_callback(
      player,
      handler,
      handler_data,
    );
  }

  late final _fluid_player_set_tick_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_player_t>, handle_midi_tick_func_t,
              ffi.Pointer<ffi.Void>)>>('fluid_player_set_tick_callback');
  late final _fluid_player_set_tick_callback =
      _fluid_player_set_tick_callbackPtr.asFunction<
          int Function(ffi.Pointer<fluid_player_t>, handle_midi_tick_func_t,
              ffi.Pointer<ffi.Void>)>();

  int fluid_player_get_status(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_get_status(
      player,
    );
  }

  late final _fluid_player_get_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_get_status');
  late final _fluid_player_get_status = _fluid_player_get_statusPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_get_current_tick(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_get_current_tick(
      player,
    );
  }

  late final _fluid_player_get_current_tickPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_get_current_tick');
  late final _fluid_player_get_current_tick = _fluid_player_get_current_tickPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_get_total_ticks(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_get_total_ticks(
      player,
    );
  }

  late final _fluid_player_get_total_ticksPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_get_total_ticks');
  late final _fluid_player_get_total_ticks = _fluid_player_get_total_ticksPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_get_bpm(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_get_bpm(
      player,
    );
  }

  late final _fluid_player_get_bpmPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_get_bpm');
  late final _fluid_player_get_bpm = _fluid_player_get_bpmPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_get_division(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_get_division(
      player,
    );
  }

  late final _fluid_player_get_divisionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_get_division');
  late final _fluid_player_get_division = _fluid_player_get_divisionPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_get_midi_tempo(
    ffi.Pointer<fluid_player_t> player,
  ) {
    return _fluid_player_get_midi_tempo(
      player,
    );
  }

  late final _fluid_player_get_midi_tempoPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_player_t>)>>(
      'fluid_player_get_midi_tempo');
  late final _fluid_player_get_midi_tempo = _fluid_player_get_midi_tempoPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>)>();

  int fluid_player_seek(
    ffi.Pointer<fluid_player_t> player,
    int ticks,
  ) {
    return _fluid_player_seek(
      player,
      ticks,
    );
  }

  late final _fluid_player_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_player_t>, ffi.Int)>>('fluid_player_seek');
  late final _fluid_player_seek = _fluid_player_seekPtr
      .asFunction<int Function(ffi.Pointer<fluid_player_t>, int)>();

  /// @startlifecycle{MIDI Sequencer}
  ffi.Pointer<fluid_sequencer_t> new_fluid_sequencer() {
    return _new_fluid_sequencer();
  }

  late final _new_fluid_sequencerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_sequencer_t> Function()>>(
          'new_fluid_sequencer');
  late final _new_fluid_sequencer = _new_fluid_sequencerPtr
      .asFunction<ffi.Pointer<fluid_sequencer_t> Function()>();

  ffi.Pointer<fluid_sequencer_t> new_fluid_sequencer2(
    int use_system_timer,
  ) {
    return _new_fluid_sequencer2(
      use_system_timer,
    );
  }

  late final _new_fluid_sequencer2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<fluid_sequencer_t> Function(ffi.Int)>>(
      'new_fluid_sequencer2');
  late final _new_fluid_sequencer2 = _new_fluid_sequencer2Ptr
      .asFunction<ffi.Pointer<fluid_sequencer_t> Function(int)>();

  void delete_fluid_sequencer(
    ffi.Pointer<fluid_sequencer_t> seq,
  ) {
    return _delete_fluid_sequencer(
      seq,
    );
  }

  late final _delete_fluid_sequencerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<fluid_sequencer_t>)>>(
      'delete_fluid_sequencer');
  late final _delete_fluid_sequencer = _delete_fluid_sequencerPtr
      .asFunction<void Function(ffi.Pointer<fluid_sequencer_t>)>();

  /// @endlifecycle
  int fluid_sequencer_get_use_system_timer(
    ffi.Pointer<fluid_sequencer_t> seq,
  ) {
    return _fluid_sequencer_get_use_system_timer(
      seq,
    );
  }

  late final _fluid_sequencer_get_use_system_timerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sequencer_t>)>>(
      'fluid_sequencer_get_use_system_timer');
  late final _fluid_sequencer_get_use_system_timer =
      _fluid_sequencer_get_use_system_timerPtr
          .asFunction<int Function(ffi.Pointer<fluid_sequencer_t>)>();

  int fluid_sequencer_register_client(
    ffi.Pointer<fluid_sequencer_t> seq,
    ffi.Pointer<ffi.Char> name,
    fluid_event_callback_t callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_sequencer_register_client(
      seq,
      name,
      callback,
      data,
    );
  }

  late final _fluid_sequencer_register_clientPtr = _lookup<
      ffi.NativeFunction<
          fluid_seq_id_t Function(
              ffi.Pointer<fluid_sequencer_t>,
              ffi.Pointer<ffi.Char>,
              fluid_event_callback_t,
              ffi.Pointer<ffi.Void>)>>('fluid_sequencer_register_client');
  late final _fluid_sequencer_register_client =
      _fluid_sequencer_register_clientPtr.asFunction<
          int Function(ffi.Pointer<fluid_sequencer_t>, ffi.Pointer<ffi.Char>,
              fluid_event_callback_t, ffi.Pointer<ffi.Void>)>();

  void fluid_sequencer_unregister_client(
    ffi.Pointer<fluid_sequencer_t> seq,
    int id,
  ) {
    return _fluid_sequencer_unregister_client(
      seq,
      id,
    );
  }

  late final _fluid_sequencer_unregister_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_sequencer_t>,
              fluid_seq_id_t)>>('fluid_sequencer_unregister_client');
  late final _fluid_sequencer_unregister_client =
      _fluid_sequencer_unregister_clientPtr
          .asFunction<void Function(ffi.Pointer<fluid_sequencer_t>, int)>();

  int fluid_sequencer_count_clients(
    ffi.Pointer<fluid_sequencer_t> seq,
  ) {
    return _fluid_sequencer_count_clients(
      seq,
    );
  }

  late final _fluid_sequencer_count_clientsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sequencer_t>)>>(
      'fluid_sequencer_count_clients');
  late final _fluid_sequencer_count_clients = _fluid_sequencer_count_clientsPtr
      .asFunction<int Function(ffi.Pointer<fluid_sequencer_t>)>();

  int fluid_sequencer_get_client_id(
    ffi.Pointer<fluid_sequencer_t> seq,
    int index,
  ) {
    return _fluid_sequencer_get_client_id(
      seq,
      index,
    );
  }

  late final _fluid_sequencer_get_client_idPtr = _lookup<
      ffi.NativeFunction<
          fluid_seq_id_t Function(ffi.Pointer<fluid_sequencer_t>,
              ffi.Int)>>('fluid_sequencer_get_client_id');
  late final _fluid_sequencer_get_client_id = _fluid_sequencer_get_client_idPtr
      .asFunction<int Function(ffi.Pointer<fluid_sequencer_t>, int)>();

  ffi.Pointer<ffi.Char> fluid_sequencer_get_client_name(
    ffi.Pointer<fluid_sequencer_t> seq,
    int id,
  ) {
    return _fluid_sequencer_get_client_name(
      seq,
      id,
    );
  }

  late final _fluid_sequencer_get_client_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_sequencer_t>,
              fluid_seq_id_t)>>('fluid_sequencer_get_client_name');
  late final _fluid_sequencer_get_client_name =
      _fluid_sequencer_get_client_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_sequencer_t>, int)>();

  int fluid_sequencer_client_is_dest(
    ffi.Pointer<fluid_sequencer_t> seq,
    int id,
  ) {
    return _fluid_sequencer_client_is_dest(
      seq,
      id,
    );
  }

  late final _fluid_sequencer_client_is_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sequencer_t>,
              fluid_seq_id_t)>>('fluid_sequencer_client_is_dest');
  late final _fluid_sequencer_client_is_dest =
      _fluid_sequencer_client_is_destPtr
          .asFunction<int Function(ffi.Pointer<fluid_sequencer_t>, int)>();

  void fluid_sequencer_process(
    ffi.Pointer<fluid_sequencer_t> seq,
    int msec,
  ) {
    return _fluid_sequencer_process(
      seq,
      msec,
    );
  }

  late final _fluid_sequencer_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_sequencer_t>,
              ffi.UnsignedInt)>>('fluid_sequencer_process');
  late final _fluid_sequencer_process = _fluid_sequencer_processPtr
      .asFunction<void Function(ffi.Pointer<fluid_sequencer_t>, int)>();

  void fluid_sequencer_send_now(
    ffi.Pointer<fluid_sequencer_t> seq,
    ffi.Pointer<fluid_event_t> evt,
  ) {
    return _fluid_sequencer_send_now(
      seq,
      evt,
    );
  }

  late final _fluid_sequencer_send_nowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_sequencer_t>,
              ffi.Pointer<fluid_event_t>)>>('fluid_sequencer_send_now');
  late final _fluid_sequencer_send_now =
      _fluid_sequencer_send_nowPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_sequencer_t>, ffi.Pointer<fluid_event_t>)>();

  int fluid_sequencer_send_at(
    ffi.Pointer<fluid_sequencer_t> seq,
    ffi.Pointer<fluid_event_t> evt,
    int time,
    int absolute,
  ) {
    return _fluid_sequencer_send_at(
      seq,
      evt,
      time,
      absolute,
    );
  }

  late final _fluid_sequencer_send_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_sequencer_t>,
              ffi.Pointer<fluid_event_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('fluid_sequencer_send_at');
  late final _fluid_sequencer_send_at = _fluid_sequencer_send_atPtr.asFunction<
      int Function(ffi.Pointer<fluid_sequencer_t>, ffi.Pointer<fluid_event_t>,
          int, int)>();

  void fluid_sequencer_remove_events(
    ffi.Pointer<fluid_sequencer_t> seq,
    int source,
    int dest,
    int type,
  ) {
    return _fluid_sequencer_remove_events(
      seq,
      source,
      dest,
      type,
    );
  }

  late final _fluid_sequencer_remove_eventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_sequencer_t>, fluid_seq_id_t,
              fluid_seq_id_t, ffi.Int)>>('fluid_sequencer_remove_events');
  late final _fluid_sequencer_remove_events =
      _fluid_sequencer_remove_eventsPtr.asFunction<
          void Function(ffi.Pointer<fluid_sequencer_t>, int, int, int)>();

  int fluid_sequencer_get_tick(
    ffi.Pointer<fluid_sequencer_t> seq,
  ) {
    return _fluid_sequencer_get_tick(
      seq,
    );
  }

  late final _fluid_sequencer_get_tickPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<fluid_sequencer_t>)>>('fluid_sequencer_get_tick');
  late final _fluid_sequencer_get_tick = _fluid_sequencer_get_tickPtr
      .asFunction<int Function(ffi.Pointer<fluid_sequencer_t>)>();

  void fluid_sequencer_set_time_scale(
    ffi.Pointer<fluid_sequencer_t> seq,
    double scale,
  ) {
    return _fluid_sequencer_set_time_scale(
      seq,
      scale,
    );
  }

  late final _fluid_sequencer_set_time_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_sequencer_t>,
              ffi.Double)>>('fluid_sequencer_set_time_scale');
  late final _fluid_sequencer_set_time_scale =
      _fluid_sequencer_set_time_scalePtr
          .asFunction<void Function(ffi.Pointer<fluid_sequencer_t>, double)>();

  double fluid_sequencer_get_time_scale(
    ffi.Pointer<fluid_sequencer_t> seq,
  ) {
    return _fluid_sequencer_get_time_scale(
      seq,
    );
  }

  late final _fluid_sequencer_get_time_scalePtr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<fluid_sequencer_t>)>>(
      'fluid_sequencer_get_time_scale');
  late final _fluid_sequencer_get_time_scale =
      _fluid_sequencer_get_time_scalePtr
          .asFunction<double Function(ffi.Pointer<fluid_sequencer_t>)>();

  /// @addtogroup sequencer
  ///
  /// @{
  int fluid_sequencer_register_fluidsynth(
    ffi.Pointer<fluid_sequencer_t> seq,
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_sequencer_register_fluidsynth(
      seq,
      synth,
    );
  }

  late final _fluid_sequencer_register_fluidsynthPtr = _lookup<
          ffi.NativeFunction<
              fluid_seq_id_t Function(
                  ffi.Pointer<fluid_sequencer_t>, ffi.Pointer<fluid_synth_t>)>>(
      'fluid_sequencer_register_fluidsynth');
  late final _fluid_sequencer_register_fluidsynth =
      _fluid_sequencer_register_fluidsynthPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_sequencer_t>, ffi.Pointer<fluid_synth_t>)>();

  int fluid_sequencer_add_midi_event_to_buffer(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<fluid_midi_event_t> event,
  ) {
    return _fluid_sequencer_add_midi_event_to_buffer(
      data,
      event,
    );
  }

  late final _fluid_sequencer_add_midi_event_to_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>>(
      'fluid_sequencer_add_midi_event_to_buffer');
  late final _fluid_sequencer_add_midi_event_to_buffer =
      _fluid_sequencer_add_midi_event_to_bufferPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<fluid_midi_event_t>)>();

  fluid_log_function_t fluid_set_log_function(
    int level,
    fluid_log_function_t fun,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_set_log_function(
      level,
      fun,
      data,
    );
  }

  late final _fluid_set_log_functionPtr = _lookup<
      ffi.NativeFunction<
          fluid_log_function_t Function(ffi.Int, fluid_log_function_t,
              ffi.Pointer<ffi.Void>)>>('fluid_set_log_function');
  late final _fluid_set_log_function = _fluid_set_log_functionPtr.asFunction<
      fluid_log_function_t Function(
          int, fluid_log_function_t, ffi.Pointer<ffi.Void>)>();

  void fluid_default_log_function(
    int level,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_default_log_function(
      level,
      message,
      data,
    );
  }

  late final _fluid_default_log_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('fluid_default_log_function');
  late final _fluid_default_log_function =
      _fluid_default_log_functionPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int fluid_log(
    int level,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _fluid_log(
      level,
      fmt,
    );
  }

  late final _fluid_logPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'fluid_log');
  late final _fluid_log =
      _fluid_logPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fluid_is_soundfont(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _fluid_is_soundfont(
      filename,
    );
  }

  late final _fluid_is_soundfontPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'fluid_is_soundfont');
  late final _fluid_is_soundfont =
      _fluid_is_soundfontPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int fluid_is_midifile(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _fluid_is_midifile(
      filename,
    );
  }

  late final _fluid_is_midifilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'fluid_is_midifile');
  late final _fluid_is_midifile =
      _fluid_is_midifilePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void fluid_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _fluid_free(
      ptr,
    );
  }

  late final _fluid_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'fluid_free');
  late final _fluid_free =
      _fluid_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// @startlifecycle{Modulator}
  ffi.Pointer<fluid_mod_t> new_fluid_mod() {
    return _new_fluid_mod();
  }

  late final _new_fluid_modPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_mod_t> Function()>>(
          'new_fluid_mod');
  late final _new_fluid_mod =
      _new_fluid_modPtr.asFunction<ffi.Pointer<fluid_mod_t> Function()>();

  void delete_fluid_mod(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _delete_fluid_mod(
      mod,
    );
  }

  late final _delete_fluid_modPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_mod_t>)>>(
          'delete_fluid_mod');
  late final _delete_fluid_mod = _delete_fluid_modPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>)>();

  /// @endlifecycle
  int fluid_mod_sizeof() {
    return _fluid_mod_sizeof();
  }

  late final _fluid_mod_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('fluid_mod_sizeof');
  late final _fluid_mod_sizeof =
      _fluid_mod_sizeofPtr.asFunction<int Function()>();

  void fluid_mod_set_source1(
    ffi.Pointer<fluid_mod_t> mod,
    int src,
    int flags,
  ) {
    return _fluid_mod_set_source1(
      mod,
      src,
      flags,
    );
  }

  late final _fluid_mod_set_source1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_mod_t>, ffi.Int,
              ffi.Int)>>('fluid_mod_set_source1');
  late final _fluid_mod_set_source1 = _fluid_mod_set_source1Ptr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int, int)>();

  void fluid_mod_set_source2(
    ffi.Pointer<fluid_mod_t> mod,
    int src,
    int flags,
  ) {
    return _fluid_mod_set_source2(
      mod,
      src,
      flags,
    );
  }

  late final _fluid_mod_set_source2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_mod_t>, ffi.Int,
              ffi.Int)>>('fluid_mod_set_source2');
  late final _fluid_mod_set_source2 = _fluid_mod_set_source2Ptr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int, int)>();

  void fluid_mod_set_dest(
    ffi.Pointer<fluid_mod_t> mod,
    int dst,
  ) {
    return _fluid_mod_set_dest(
      mod,
      dst,
    );
  }

  late final _fluid_mod_set_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_mod_t>, ffi.Int)>>('fluid_mod_set_dest');
  late final _fluid_mod_set_dest = _fluid_mod_set_destPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int)>();

  void fluid_mod_set_amount(
    ffi.Pointer<fluid_mod_t> mod,
    double amount,
  ) {
    return _fluid_mod_set_amount(
      mod,
      amount,
    );
  }

  late final _fluid_mod_set_amountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_mod_t>, ffi.Double)>>('fluid_mod_set_amount');
  late final _fluid_mod_set_amount = _fluid_mod_set_amountPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, double)>();

  void fluid_mod_set_transform(
    ffi.Pointer<fluid_mod_t> mod,
    int type,
  ) {
    return _fluid_mod_set_transform(
      mod,
      type,
    );
  }

  late final _fluid_mod_set_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_mod_t>, ffi.Int)>>('fluid_mod_set_transform');
  late final _fluid_mod_set_transform = _fluid_mod_set_transformPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int)>();

  int fluid_mod_get_source1(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_source1(
      mod,
    );
  }

  late final _fluid_mod_get_source1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_source1');
  late final _fluid_mod_get_source1 = _fluid_mod_get_source1Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_flags1(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_flags1(
      mod,
    );
  }

  late final _fluid_mod_get_flags1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_flags1');
  late final _fluid_mod_get_flags1 = _fluid_mod_get_flags1Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_source2(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_source2(
      mod,
    );
  }

  late final _fluid_mod_get_source2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_source2');
  late final _fluid_mod_get_source2 = _fluid_mod_get_source2Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_flags2(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_flags2(
      mod,
    );
  }

  late final _fluid_mod_get_flags2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_flags2');
  late final _fluid_mod_get_flags2 = _fluid_mod_get_flags2Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_dest(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_dest(
      mod,
    );
  }

  late final _fluid_mod_get_destPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_dest');
  late final _fluid_mod_get_dest = _fluid_mod_get_destPtr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  double fluid_mod_get_amount(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_amount(
      mod,
    );
  }

  late final _fluid_mod_get_amountPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_mod_t>)>>(
      'fluid_mod_get_amount');
  late final _fluid_mod_get_amount = _fluid_mod_get_amountPtr
      .asFunction<double Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_transform(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_transform(
      mod,
    );
  }

  late final _fluid_mod_get_transformPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_transform');
  late final _fluid_mod_get_transform = _fluid_mod_get_transformPtr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_test_identity(
    ffi.Pointer<fluid_mod_t> mod1,
    ffi.Pointer<fluid_mod_t> mod2,
  ) {
    return _fluid_mod_test_identity(
      mod1,
      mod2,
    );
  }

  late final _fluid_mod_test_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_mod_t>,
              ffi.Pointer<fluid_mod_t>)>>('fluid_mod_test_identity');
  late final _fluid_mod_test_identity = _fluid_mod_test_identityPtr.asFunction<
      int Function(ffi.Pointer<fluid_mod_t>, ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_has_source(
    ffi.Pointer<fluid_mod_t> mod,
    int cc,
    int ctrl,
  ) {
    return _fluid_mod_has_source(
      mod,
      cc,
      ctrl,
    );
  }

  late final _fluid_mod_has_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_mod_t>, ffi.Int,
              ffi.Int)>>('fluid_mod_has_source');
  late final _fluid_mod_has_source = _fluid_mod_has_sourcePtr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>, int, int)>();

  int fluid_mod_has_dest(
    ffi.Pointer<fluid_mod_t> mod,
    int gen,
  ) {
    return _fluid_mod_has_dest(
      mod,
      gen,
    );
  }

  late final _fluid_mod_has_destPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>, ffi.Int)>>(
      'fluid_mod_has_dest');
  late final _fluid_mod_has_dest = _fluid_mod_has_destPtr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>, int)>();

  void fluid_mod_clone(
    ffi.Pointer<fluid_mod_t> mod,
    ffi.Pointer<fluid_mod_t> src,
  ) {
    return _fluid_mod_clone(
      mod,
      src,
    );
  }

  late final _fluid_mod_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_mod_t>,
              ffi.Pointer<fluid_mod_t>)>>('fluid_mod_clone');
  late final _fluid_mod_clone = _fluid_mod_clonePtr.asFunction<
      void Function(ffi.Pointer<fluid_mod_t>, ffi.Pointer<fluid_mod_t>)>();

  void fluid_voice_add_mod1(
    ffi.Pointer<fluid_voice_t> voice,
    ffi.Pointer<fluid_mod_t> mod,
    int mode,
  ) {
    return _fluid_voice_add_mod1(
      voice,
      mod,
      mode,
    );
  }

  late final _fluid_voice_add_mod1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>,
              ffi.Pointer<fluid_mod_t>, ffi.Int)>>('fluid_voice_add_mod');
  late final _fluid_voice_add_mod1 = _fluid_voice_add_mod1Ptr.asFunction<
      void Function(
          ffi.Pointer<fluid_voice_t>, ffi.Pointer<fluid_mod_t>, int)>();

  double fluid_voice_gen_get(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
  ) {
    return _fluid_voice_gen_get(
      voice,
      gen,
    );
  }

  late final _fluid_voice_gen_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<fluid_voice_t>, ffi.Int)>>('fluid_voice_gen_get');
  late final _fluid_voice_gen_get = _fluid_voice_gen_getPtr
      .asFunction<double Function(ffi.Pointer<fluid_voice_t>, int)>();

  void fluid_voice_gen_set(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
    double val,
  ) {
    return _fluid_voice_gen_set(
      voice,
      gen,
      val,
    );
  }

  late final _fluid_voice_gen_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>, ffi.Int,
              ffi.Float)>>('fluid_voice_gen_set');
  late final _fluid_voice_gen_set = _fluid_voice_gen_setPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>, int, double)>();

  void fluid_voice_gen_incr(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
    double val,
  ) {
    return _fluid_voice_gen_incr(
      voice,
      gen,
      val,
    );
  }

  late final _fluid_voice_gen_incrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>, ffi.Int,
              ffi.Float)>>('fluid_voice_gen_incr');
  late final _fluid_voice_gen_incr = _fluid_voice_gen_incrPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>, int, double)>();

  int fluid_voice_get_id(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_id(
      voice,
    );
  }

  late final _fluid_voice_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<fluid_voice_t>)>>('fluid_voice_get_id');
  late final _fluid_voice_get_id = _fluid_voice_get_idPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_get_channel(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_channel(
      voice,
    );
  }

  late final _fluid_voice_get_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_get_channel');
  late final _fluid_voice_get_channel = _fluid_voice_get_channelPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_get_key(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_key(
      voice,
    );
  }

  late final _fluid_voice_get_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_get_key');
  late final _fluid_voice_get_key = _fluid_voice_get_keyPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_get_actual_key(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_actual_key(
      voice,
    );
  }

  late final _fluid_voice_get_actual_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_get_actual_key');
  late final _fluid_voice_get_actual_key = _fluid_voice_get_actual_keyPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_get_velocity(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_velocity(
      voice,
    );
  }

  late final _fluid_voice_get_velocityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_get_velocity');
  late final _fluid_voice_get_velocity = _fluid_voice_get_velocityPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_get_actual_velocity(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_actual_velocity(
      voice,
    );
  }

  late final _fluid_voice_get_actual_velocityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_get_actual_velocity');
  late final _fluid_voice_get_actual_velocity =
      _fluid_voice_get_actual_velocityPtr
          .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_is_playing(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_is_playing(
      voice,
    );
  }

  late final _fluid_voice_is_playingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_is_playing');
  late final _fluid_voice_is_playing = _fluid_voice_is_playingPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_is_on(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_is_on(
      voice,
    );
  }

  late final _fluid_voice_is_onPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_is_on');
  late final _fluid_voice_is_on = _fluid_voice_is_onPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_is_sustained(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_is_sustained(
      voice,
    );
  }

  late final _fluid_voice_is_sustainedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_is_sustained');
  late final _fluid_voice_is_sustained = _fluid_voice_is_sustainedPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_is_sostenuto(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_is_sostenuto(
      voice,
    );
  }

  late final _fluid_voice_is_sostenutoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_is_sostenuto');
  late final _fluid_voice_is_sostenuto = _fluid_voice_is_sostenutoPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_optimize_sample(
    ffi.Pointer<fluid_sample_t> s,
  ) {
    return _fluid_voice_optimize_sample(
      s,
    );
  }

  late final _fluid_voice_optimize_samplePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sample_t>)>>(
      'fluid_voice_optimize_sample');
  late final _fluid_voice_optimize_sample = _fluid_voice_optimize_samplePtr
      .asFunction<int Function(ffi.Pointer<fluid_sample_t>)>();

  void fluid_voice_update_param(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
  ) {
    return _fluid_voice_update_param(
      voice,
      gen,
    );
  }

  late final _fluid_voice_update_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>,
              ffi.Int)>>('fluid_voice_update_param');
  late final _fluid_voice_update_param = _fluid_voice_update_paramPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>, int)>();

  void fluid_version(
    ffi.Pointer<ffi.Int> major,
    ffi.Pointer<ffi.Int> minor,
    ffi.Pointer<ffi.Int> micro,
  ) {
    return _fluid_version(
      major,
      minor,
      micro,
    );
  }

  late final _fluid_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_version');
  late final _fluid_version = _fluid_versionPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fluid_version_str() {
    return _fluid_version_str();
  }

  late final _fluid_version_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'fluid_version_str');
  late final _fluid_version_str =
      _fluid_version_strPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @defgroup ladspa Effect - LADSPA
  /// @ingroup synth
  ///
  /// Functions for configuring the LADSPA effects unit
  ///
  /// This header defines useful functions for programmatically manipulating the ladspa
  /// effects unit of the synth that can be retrieved via fluid_synth_get_ladspa_fx().
  ///
  /// Using any of those functions requires fluidsynth to be compiled with LADSPA support.
  /// Else all of those functions are useless dummies.
  ///
  /// @{
  int fluid_ladspa_is_active(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
  ) {
    return _fluid_ladspa_is_active(
      fx,
    );
  }

  late final _fluid_ladspa_is_activePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>)>>(
      'fluid_ladspa_is_active');
  late final _fluid_ladspa_is_active = _fluid_ladspa_is_activePtr
      .asFunction<int Function(ffi.Pointer<fluid_ladspa_fx_t>)>();

  int fluid_ladspa_activate(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
  ) {
    return _fluid_ladspa_activate(
      fx,
    );
  }

  late final _fluid_ladspa_activatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>)>>(
      'fluid_ladspa_activate');
  late final _fluid_ladspa_activate = _fluid_ladspa_activatePtr
      .asFunction<int Function(ffi.Pointer<fluid_ladspa_fx_t>)>();

  int fluid_ladspa_deactivate(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
  ) {
    return _fluid_ladspa_deactivate(
      fx,
    );
  }

  late final _fluid_ladspa_deactivatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>)>>(
      'fluid_ladspa_deactivate');
  late final _fluid_ladspa_deactivate = _fluid_ladspa_deactivatePtr
      .asFunction<int Function(ffi.Pointer<fluid_ladspa_fx_t>)>();

  int fluid_ladspa_reset(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
  ) {
    return _fluid_ladspa_reset(
      fx,
    );
  }

  late final _fluid_ladspa_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>)>>(
      'fluid_ladspa_reset');
  late final _fluid_ladspa_reset = _fluid_ladspa_resetPtr
      .asFunction<int Function(ffi.Pointer<fluid_ladspa_fx_t>)>();

  int fluid_ladspa_check(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> err,
    int err_size,
  ) {
    return _fluid_ladspa_check(
      fx,
      err,
      err_size,
    );
  }

  late final _fluid_ladspa_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('fluid_ladspa_check');
  late final _fluid_ladspa_check = _fluid_ladspa_checkPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>, int)>();

  int fluid_ladspa_host_port_exists(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_ladspa_host_port_exists(
      fx,
      name,
    );
  }

  late final _fluid_ladspa_host_port_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_host_port_exists');
  late final _fluid_ladspa_host_port_exists =
      _fluid_ladspa_host_port_existsPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_ladspa_add_buffer(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_ladspa_add_buffer(
      fx,
      name,
    );
  }

  late final _fluid_ladspa_add_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_add_buffer');
  late final _fluid_ladspa_add_buffer = _fluid_ladspa_add_bufferPtr.asFunction<
      int Function(ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_ladspa_buffer_exists(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_ladspa_buffer_exists(
      fx,
      name,
    );
  }

  late final _fluid_ladspa_buffer_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_buffer_exists');
  late final _fluid_ladspa_buffer_exists =
      _fluid_ladspa_buffer_existsPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_ladspa_add_effect(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> effect_name,
    ffi.Pointer<ffi.Char> lib_name,
    ffi.Pointer<ffi.Char> plugin_name,
  ) {
    return _fluid_ladspa_add_effect(
      fx,
      effect_name,
      lib_name,
      plugin_name,
    );
  }

  late final _fluid_ladspa_add_effectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_add_effect');
  late final _fluid_ladspa_add_effect = _fluid_ladspa_add_effectPtr.asFunction<
      int Function(ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fluid_ladspa_effect_can_mix(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_ladspa_effect_can_mix(
      fx,
      name,
    );
  }

  late final _fluid_ladspa_effect_can_mixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_effect_can_mix');
  late final _fluid_ladspa_effect_can_mix =
      _fluid_ladspa_effect_can_mixPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_ladspa_effect_set_mix(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> name,
    int mix,
    double gain,
  ) {
    return _fluid_ladspa_effect_set_mix(
      fx,
      name,
      mix,
      gain,
    );
  }

  late final _fluid_ladspa_effect_set_mixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Float)>>('fluid_ladspa_effect_set_mix');
  late final _fluid_ladspa_effect_set_mix =
      _fluid_ladspa_effect_set_mixPtr.asFunction<
          int Function(ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>,
              int, double)>();

  int fluid_ladspa_effect_port_exists(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> effect_name,
    ffi.Pointer<ffi.Char> port_name,
  ) {
    return _fluid_ladspa_effect_port_exists(
      fx,
      effect_name,
      port_name,
    );
  }

  late final _fluid_ladspa_effect_port_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_effect_port_exists');
  late final _fluid_ladspa_effect_port_exists =
      _fluid_ladspa_effect_port_existsPtr.asFunction<
          int Function(ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int fluid_ladspa_effect_set_control(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> effect_name,
    ffi.Pointer<ffi.Char> port_name,
    double val,
  ) {
    return _fluid_ladspa_effect_set_control(
      fx,
      effect_name,
      port_name,
      val,
    );
  }

  late final _fluid_ladspa_effect_set_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Float)>>('fluid_ladspa_effect_set_control');
  late final _fluid_ladspa_effect_set_control =
      _fluid_ladspa_effect_set_controlPtr.asFunction<
          int Function(ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, double)>();

  int fluid_ladspa_effect_link(
    ffi.Pointer<fluid_ladspa_fx_t> fx,
    ffi.Pointer<ffi.Char> effect_name,
    ffi.Pointer<ffi.Char> port_name,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_ladspa_effect_link(
      fx,
      effect_name,
      port_name,
      name,
    );
  }

  late final _fluid_ladspa_effect_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ladspa_fx_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_ladspa_effect_link');
  late final _fluid_ladspa_effect_link =
      _fluid_ladspa_effect_linkPtr.asFunction<
          int Function(ffi.Pointer<fluid_ladspa_fx_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

/// stdio buffers
final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

/// hold a buncha junk that would grow the ABI
final class __sFILEX extends ffi.Opaque {}

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
final class __sFILE extends ffi.Struct {
  /// current position in (some) buffer
  external ffi.Pointer<ffi.UnsignedChar> _p;

  /// read space left for getc()
  @ffi.Int()
  external int _r;

  /// write space left for putc()
  @ffi.Int()
  external int _w;

  /// flags, below; this FILE is free if 0
  @ffi.Short()
  external int _flags;

  /// fileno, if Unix descriptor, else -1
  @ffi.Short()
  external int _file;

  /// the buffer (at least 1 byte, if !NULL)
  external __sbuf _bf;

  /// 0 or -_bf._size, for inline putc
  @ffi.Int()
  external int _lbfsize;

  /// cookie passed to io functions
  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  /// ungetc buffer
  external __sbuf _ub;

  /// additions to FILE to not break ABI
  external ffi.Pointer<__sFILEX> _extra;

  /// saved _r when _r is counting ungetc data
  @ffi.Int()
  external int _ur;

  /// guarantee an ungetc() buffer
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  /// guarantee a getc() buffer
  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  /// buffer for fgetln()
  external __sbuf _lb;

  /// stat.st_blksize (may be != _bf._size)
  @ffi.Int()
  external int _blksize;

  /// current lseek offset (see WARNING)
  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;

final class _fluid_hashtable_t extends ffi.Opaque {}

final class _fluid_synth_t extends ffi.Opaque {}

final class _fluid_voice_t extends ffi.Opaque {}

final class _fluid_sfloader_t extends ffi.Opaque {}

final class _fluid_sfont_t extends ffi.Opaque {}

final class _fluid_preset_t extends ffi.Opaque {}

final class _fluid_sample_t extends ffi.Opaque {}

final class _fluid_mod_t extends ffi.Opaque {}

final class _fluid_audio_driver_t extends ffi.Opaque {}

final class _fluid_file_renderer_t extends ffi.Opaque {}

final class _fluid_player_t extends ffi.Opaque {}

final class _fluid_midi_event_t extends ffi.Opaque {}

final class _fluid_midi_driver_t extends ffi.Opaque {}

final class _fluid_midi_router_t extends ffi.Opaque {}

final class _fluid_midi_router_rule_t extends ffi.Opaque {}

final class _fluid_shell_t extends ffi.Opaque {}

final class _fluid_server_t extends ffi.Opaque {}

final class _fluid_event_t extends ffi.Opaque {}

final class _fluid_sequencer_t extends ffi.Opaque {}

final class _fluid_ramsfont_t extends ffi.Opaque {}

final class _fluid_rampreset_t extends ffi.Opaque {}

final class _fluid_cmd_handler_t extends ffi.Opaque {}

final class _fluid_ladspa_fx_t extends ffi.Opaque {}

final class _fluid_file_callbacks_t extends ffi.Opaque {}

/// Settings type
///
/// Each setting has a defined type: numeric (double), integer, string or a
/// set of values. The type of each setting can be retrieved using the
/// function fluid_settings_get_type()
abstract class fluid_types_enum {
  /// < Undefined type
  static const int FLUID_NO_TYPE = -1;

  /// < Numeric (double)
  static const int FLUID_NUM_TYPE = 0;

  /// < Integer
  static const int FLUID_INT_TYPE = 1;

  /// < String
  static const int FLUID_STR_TYPE = 2;

  /// < Set of values
  static const int FLUID_SET_TYPE = 3;
}

/// @defgroup Types Types
/// @brief Type declarations
///
/// @{
typedef fluid_settings_t = _fluid_hashtable_t;

/// Callback function type used with fluid_settings_foreach_option()
///
/// @param data User defined data pointer
/// @param name Setting name
/// @param option A string option for this setting (iterates through the list)
typedef fluid_settings_foreach_option_t
    = ffi.Pointer<ffi.NativeFunction<fluid_settings_foreach_option_tFunction>>;
typedef fluid_settings_foreach_option_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> option);
typedef Dartfluid_settings_foreach_option_tFunction = void Function(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> option);

/// Callback function type used with fluid_settings_foreach()
///
/// @param data User defined data pointer
/// @param name Setting name
/// @param type Setting type (#fluid_types_enum)
typedef fluid_settings_foreach_t
    = ffi.Pointer<ffi.NativeFunction<fluid_settings_foreach_tFunction>>;
typedef fluid_settings_foreach_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Char> name, ffi.Int type);
typedef Dartfluid_settings_foreach_tFunction = void Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Char> name, int type);
typedef fluid_synth_t = _fluid_synth_t;
typedef fluid_preset_t = _fluid_preset_t;
typedef fluid_voice_t = _fluid_voice_t;
typedef fluid_sample_t = _fluid_sample_t;
typedef fluid_sfont_t = _fluid_sfont_t;

/// Chorus modulation waveform type.
abstract class fluid_chorus_mod {
  /// < Sine wave chorus modulation
  static const int FLUID_CHORUS_MOD_SINE = 0;

  /// < Triangle wave chorus modulation
  static const int FLUID_CHORUS_MOD_TRIANGLE = 1;
}

/// Synthesis interpolation method.
abstract class fluid_interp {
  /// < No interpolation: Fastest, but questionable audio quality
  static const int FLUID_INTERP_NONE = 0;

  /// < Straight-line interpolation: A bit slower, reasonable audio quality
  static const int FLUID_INTERP_LINEAR = 1;

  /// < Fourth-order interpolation, good quality, the default
  static const int FLUID_INTERP_4THORDER = 4;

  /// < Seventh-order interpolation
  static const int FLUID_INTERP_7THORDER = 7;

  /// < Default interpolation method
  static const int FLUID_INTERP_DEFAULT = 4;

  /// < Highest interpolation method
  static const int FLUID_INTERP_HIGHEST = 7;
}

/// Enum used with fluid_synth_add_default_mod() to specify how to handle duplicate modulators.
abstract class fluid_synth_add_mod {
  /// < Overwrite any existing matching modulator
  static const int FLUID_SYNTH_OVERWRITE = 0;

  /// < Sum up modulator amounts
  static const int FLUID_SYNTH_ADD = 1;
}

typedef fluid_mod_t = _fluid_mod_t;

/// Specifies the type of filter to use for the custom IIR filter
abstract class fluid_iir_filter_type {
  /// < Custom IIR filter is not operating
  static const int FLUID_IIR_DISABLED = 0;

  /// < Custom IIR filter is operating as low-pass filter
  static const int FLUID_IIR_LOWPASS = 1;

  /// < Custom IIR filter is operating as high-pass filter
  static const int FLUID_IIR_HIGHPASS = 2;

  /// < @internal Value defines the count of filter types (#fluid_iir_filter_type) @warning This symbol is not part of the public API and ABI stability guarantee and may change at any time!
  static const int FLUID_IIR_LAST = 3;
}

/// Specifies optional settings to use for the custom IIR filter. Can be bitwise ORed.
abstract class fluid_iir_filter_flags {
  /// < The Soundfont spec requires the filter Q to be interpreted in dB. If this flag is set the filter Q is instead assumed to be in a linear range
  static const int FLUID_IIR_Q_LINEAR = 1;

  /// < If this flag the filter is switched off if Q == 0 (prior to any transformation)
  static const int FLUID_IIR_Q_ZERO_OFF = 2;

  /// < The Soundfont spec requires to correct the gain of the filter depending on the filter's Q. If this flag is set the filter gain will not be corrected.
  static const int FLUID_IIR_NO_GAIN_AMP = 4;
}

/// The midi channel type used by fluid_synth_set_channel_type()
abstract class fluid_midi_channel_type {
  /// < Melodic midi channel
  static const int CHANNEL_TYPE_MELODIC = 0;

  /// < Drum midi channel
  static const int CHANNEL_TYPE_DRUM = 1;
}

/// Channel mode bits OR-ed together so that it matches with the midi spec: poly omnion (0), mono omnion (1), poly omnioff (2), mono omnioff (3)
abstract class fluid_channel_mode_flags {
  /// < if flag is set, the basic channel is in mono on state, if not set poly is on
  static const int FLUID_CHANNEL_POLY_OFF = 1;

  /// < if flag is set, the basic channel is in omni off state, if not set omni is on
  static const int FLUID_CHANNEL_OMNI_OFF = 2;
}

/// Indicates the mode a basic channel is set to
abstract class fluid_basic_channel_modes {
  /// < Mask Poly and Omni bits of #fluid_channel_mode_flags, usually only used internally
  static const int FLUID_CHANNEL_MODE_MASK = 3;

  /// < corresponds to MIDI mode 0
  static const int FLUID_CHANNEL_MODE_OMNION_POLY = 0;

  /// < corresponds to MIDI mode 1
  static const int FLUID_CHANNEL_MODE_OMNION_MONO = 1;

  /// < corresponds to MIDI mode 2
  static const int FLUID_CHANNEL_MODE_OMNIOFF_POLY = 2;

  /// < corresponds to MIDI mode 3
  static const int FLUID_CHANNEL_MODE_OMNIOFF_MONO = 3;

  /// < @internal Value defines the count of basic channel modes (#fluid_basic_channel_modes) @warning This symbol is not part of the public API and ABI stability guarantee and may change at any time!
  static const int FLUID_CHANNEL_MODE_LAST = 4;
}

/// Indicates the legato mode a channel is set to
/// n1,n2,n3,.. is a legato passage. n1 is the first note, and n2,n3,n4 are played legato with previous note.
abstract class fluid_channel_legato_mode {
  /// < Mode 0 - Release previous note, start a new note
  static const int FLUID_CHANNEL_LEGATO_MODE_RETRIGGER = 0;

  /// < Mode 1 - On contiguous notes retrigger in attack section using current value, shape attack using current dynamic and make use of previous voices if any
  static const int FLUID_CHANNEL_LEGATO_MODE_MULTI_RETRIGGER = 1;

  /// < @internal Value defines the count of legato modes (#fluid_channel_legato_mode) @warning This symbol is not part of the public API and ABI stability guarantee and may change at any time!
  static const int FLUID_CHANNEL_LEGATO_MODE_LAST = 2;
}

/// Indicates the portamento mode a channel is set to
abstract class fluid_channel_portamento_mode {
  /// < Mode 0 - Portamento on each note (staccato or legato)
  static const int FLUID_CHANNEL_PORTAMENTO_MODE_EACH_NOTE = 0;

  /// < Mode 1 - Portamento only on legato note
  static const int FLUID_CHANNEL_PORTAMENTO_MODE_LEGATO_ONLY = 1;

  /// < Mode 2 - Portamento only on staccato note
  static const int FLUID_CHANNEL_PORTAMENTO_MODE_STACCATO_ONLY = 2;

  /// < @internal Value defines the count of portamento modes
  /// @warning This symbol is not part of the public API and ABI
  /// stability guarantee and may change at any time!
  static const int FLUID_CHANNEL_PORTAMENTO_MODE_LAST = 3;
}

/// Indicates the breath mode a channel is set to
abstract class fluid_channel_breath_flags {
  /// < when channel is poly, this flag indicates that the default velocity to initial attenuation modulator is replaced by a breath to initial attenuation modulator
  static const int FLUID_CHANNEL_BREATH_POLY = 16;

  /// < when channel is mono, this flag indicates that the default velocity to initial attenuation modulator is replaced by a breath modulator
  static const int FLUID_CHANNEL_BREATH_MONO = 32;

  /// < when channel is mono, this flag indicates that the breath controller(MSB)triggers noteon/noteoff on the running note
  static const int FLUID_CHANNEL_BREATH_SYNC = 64;
}

typedef fluid_sfloader_t = _fluid_sfloader_t;
typedef fluid_midi_event_t = _fluid_midi_event_t;
typedef fluid_ladspa_fx_t = _fluid_ladspa_fx_t;
typedef fluid_istream_t = ffi.Int;
typedef Dartfluid_istream_t = int;
typedef fluid_ostream_t = ffi.Int;
typedef Dartfluid_ostream_t = int;
typedef fluid_cmd_handler_t = _fluid_cmd_handler_t;
typedef fluid_midi_router_t = _fluid_midi_router_t;
typedef fluid_player_t = _fluid_player_t;
typedef fluid_shell_t = _fluid_shell_t;
typedef fluid_server_t = _fluid_server_t;

/// Indicates the type of a sample used by the _fluid_sample_t::sampletype field.
///
/// This enum corresponds to the \c SFSampleLink enum in the SoundFont spec.
/// One \c flag may be bit-wise OR-ed with one \c value.
abstract class fluid_sample_type {
  /// < Value used for mono samples
  static const int FLUID_SAMPLETYPE_MONO = 1;

  /// < Value used for right samples of a stereo pair
  static const int FLUID_SAMPLETYPE_RIGHT = 2;

  /// < Value used for left samples of a stereo pair
  static const int FLUID_SAMPLETYPE_LEFT = 4;

  /// < Value used for linked sample, which is currently not supported
  static const int FLUID_SAMPLETYPE_LINKED = 8;

  /// < Flag used for Ogg Vorbis compressed samples (non-standard compliant extension) as found in the program "sftools" developed by Werner Schweer from MuseScore @since 1.1.7
  static const int FLUID_SAMPLETYPE_OGG_VORBIS = 16;

  /// < Flag that indicates ROM samples, causing the sample to be ignored
  static const int FLUID_SAMPLETYPE_ROM = 32768;
}

/// Method to load an instrument file (does not actually need to be a real file name,
/// could be another type of string identifier that the \a loader understands).
///
/// @param loader SoundFont loader
/// @param filename File name or other string identifier
/// @return The loaded instrument file (SoundFont) or NULL if an error occurred.
typedef fluid_sfloader_load_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_load_tFunction>>;
typedef fluid_sfloader_load_tFunction = ffi.Pointer<fluid_sfont_t> Function(
    ffi.Pointer<fluid_sfloader_t> loader, ffi.Pointer<ffi.Char> filename);

/// The free method should free the memory allocated for a fluid_sfloader_t instance in
/// addition to any private data.
///
/// @param loader SoundFont loader
///
/// Any custom user provided cleanup function must ultimately call
/// delete_fluid_sfloader() to ensure proper cleanup of the #fluid_sfloader_t struct. If no private data
/// needs to be freed, setting this to delete_fluid_sfloader() is sufficient.
typedef fluid_sfloader_free_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_free_tFunction>>;
typedef fluid_sfloader_free_tFunction = ffi.Void Function(
    ffi.Pointer<fluid_sfloader_t> loader);
typedef Dartfluid_sfloader_free_tFunction = void Function(
    ffi.Pointer<fluid_sfloader_t> loader);

/// Opens the file or memory indicated by \c filename in binary read mode.
///
/// @return returns a file handle on success, NULL otherwise
///
/// \c filename matches the string provided during the fluid_synth_sfload() call.
typedef fluid_sfloader_callback_open_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_callback_open_tFunction>>;
typedef fluid_sfloader_callback_open_tFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> filename);

/// Reads \c count bytes to the specified buffer \c buf.
///
/// @return returns #FLUID_OK if exactly \c count bytes were successfully read, else returns #FLUID_FAILED and leaves \a buf unmodified.
typedef fluid_sfloader_callback_read_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_callback_read_tFunction>>;
typedef fluid_sfloader_callback_read_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> buf,
    fluid_long_long_t count,
    ffi.Pointer<ffi.Void> handle);
typedef Dartfluid_sfloader_callback_read_tFunction = int Function(
    ffi.Pointer<ffi.Void> buf,
    Dartfluid_long_long_t count,
    ffi.Pointer<ffi.Void> handle);

/// A typedef for C99's type long long, which is at least 64-bit wide, as guaranteed by the C99.
/// @p __int64 will be used as replacement for VisualStudio 2010 and older.
typedef fluid_long_long_t = ffi.LongLong;
typedef Dartfluid_long_long_t = int;

/// Same purpose and behaviour as fseek.
///
/// @param origin either \c SEEK_SET, \c SEEK_CUR or \c SEEK_END
/// @return returns #FLUID_OK if the seek was successfully performed while not seeking beyond a buffer or file, #FLUID_FAILED otherwise
typedef fluid_sfloader_callback_seek_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_callback_seek_tFunction>>;
typedef fluid_sfloader_callback_seek_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> handle, fluid_long_long_t offset, ffi.Int origin);
typedef Dartfluid_sfloader_callback_seek_tFunction = int Function(
    ffi.Pointer<ffi.Void> handle, Dartfluid_long_long_t offset, int origin);

/// @return returns current file offset or #FLUID_FAILED on error
typedef fluid_sfloader_callback_tell_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_callback_tell_tFunction>>;
typedef fluid_sfloader_callback_tell_tFunction = fluid_long_long_t Function(
    ffi.Pointer<ffi.Void> handle);
typedef Dartfluid_sfloader_callback_tell_tFunction = Dartfluid_long_long_t
    Function(ffi.Pointer<ffi.Void> handle);

/// Closes the handle returned by #fluid_sfloader_callback_open_t and frees used resources.
///
/// @return returns #FLUID_OK on success, #FLUID_FAILED on error
typedef fluid_sfloader_callback_close_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfloader_callback_close_tFunction>>;
typedef fluid_sfloader_callback_close_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> handle);
typedef Dartfluid_sfloader_callback_close_tFunction = int Function(
    ffi.Pointer<ffi.Void> handle);

/// Method to return the name of a virtual SoundFont.
///
/// @param sfont Virtual SoundFont
/// @return The name of the virtual SoundFont.
typedef fluid_sfont_get_name_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfont_get_name_tFunction>>;
typedef fluid_sfont_get_name_tFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<fluid_sfont_t> sfont);

/// Get a virtual SoundFont preset by bank and program numbers.
///
/// @param sfont Virtual SoundFont
/// @param bank MIDI bank number (0-16383)
/// @param prenum MIDI preset number (0-127)
/// @return Should return an allocated virtual preset or NULL if it could not
/// be found.
typedef fluid_sfont_get_preset_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfont_get_preset_tFunction>>;
typedef fluid_sfont_get_preset_tFunction = ffi.Pointer<fluid_preset_t> Function(
    ffi.Pointer<fluid_sfont_t> sfont, ffi.Int bank, ffi.Int prenum);
typedef Dartfluid_sfont_get_preset_tFunction = ffi.Pointer<fluid_preset_t>
    Function(ffi.Pointer<fluid_sfont_t> sfont, int bank, int prenum);

/// Start virtual SoundFont preset iteration method.
///
/// @param sfont Virtual SoundFont
///
/// Starts/re-starts virtual preset iteration in a SoundFont.
typedef fluid_sfont_iteration_start_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfont_iteration_start_tFunction>>;
typedef fluid_sfont_iteration_start_tFunction = ffi.Void Function(
    ffi.Pointer<fluid_sfont_t> sfont);
typedef Dartfluid_sfont_iteration_start_tFunction = void Function(
    ffi.Pointer<fluid_sfont_t> sfont);

/// Virtual SoundFont preset iteration function.
///
/// @param sfont Virtual SoundFont
/// @return NULL when no more presets are available, otherwise the a pointer to the current preset
///
/// Returns preset information to the caller. The returned buffer is only valid until a subsequent
/// call to this function.
typedef fluid_sfont_iteration_next_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfont_iteration_next_tFunction>>;
typedef fluid_sfont_iteration_next_tFunction = ffi.Pointer<fluid_preset_t>
    Function(ffi.Pointer<fluid_sfont_t> sfont);

/// Method to free a virtual SoundFont bank.
///
/// @param sfont Virtual SoundFont to free.
/// @return Should return 0 when it was able to free all resources or non-zero
/// if some of the samples could not be freed because they are still in use,
/// in which case the free will be tried again later, until success.
///
/// Any custom user provided cleanup function must ultimately call
/// delete_fluid_sfont() to ensure proper cleanup of the #fluid_sfont_t struct. If no private data
/// needs to be freed, setting this to delete_fluid_sfont() is sufficient.
typedef fluid_sfont_free_t
    = ffi.Pointer<ffi.NativeFunction<fluid_sfont_free_tFunction>>;
typedef fluid_sfont_free_tFunction = ffi.Int Function(
    ffi.Pointer<fluid_sfont_t> sfont);
typedef Dartfluid_sfont_free_tFunction = int Function(
    ffi.Pointer<fluid_sfont_t> sfont);

/// Method to get a virtual SoundFont preset name.
///
/// @param preset Virtual SoundFont preset
/// @return Should return the name of the preset.  The returned string must be
/// valid for the duration of the virtual preset (or the duration of the
/// SoundFont, in the case of preset iteration).
typedef fluid_preset_get_name_t
    = ffi.Pointer<ffi.NativeFunction<fluid_preset_get_name_tFunction>>;
typedef fluid_preset_get_name_tFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<fluid_preset_t> preset);

/// Method to get a virtual SoundFont preset MIDI bank number.
///
/// @param preset Virtual SoundFont preset
/// @param return The bank number of the preset
typedef fluid_preset_get_banknum_t
    = ffi.Pointer<ffi.NativeFunction<fluid_preset_get_banknum_tFunction>>;
typedef fluid_preset_get_banknum_tFunction = ffi.Int Function(
    ffi.Pointer<fluid_preset_t> preset);
typedef Dartfluid_preset_get_banknum_tFunction = int Function(
    ffi.Pointer<fluid_preset_t> preset);

/// Method to get a virtual SoundFont preset MIDI program number.
///
/// @param preset Virtual SoundFont preset
/// @param return The program number of the preset
typedef fluid_preset_get_num_t
    = ffi.Pointer<ffi.NativeFunction<fluid_preset_get_num_tFunction>>;
typedef fluid_preset_get_num_tFunction = ffi.Int Function(
    ffi.Pointer<fluid_preset_t> preset);
typedef Dartfluid_preset_get_num_tFunction = int Function(
    ffi.Pointer<fluid_preset_t> preset);

/// Method to handle a noteon event (synthesize the instrument).
///
/// @param preset Virtual SoundFont preset
/// @param synth Synthesizer instance
/// @param chan MIDI channel number of the note on event
/// @param key MIDI note number (0-127)
/// @param vel MIDI velocity (0-127)
/// @return #FLUID_OK on success (0) or #FLUID_FAILED (-1) otherwise
///
/// This method may be called from within synthesis context and therefore
/// should be as efficient as possible and not perform any operations considered
/// bad for realtime audio output (memory allocations and other OS calls).
///
/// Call fluid_synth_alloc_voice() for every sample that has
/// to be played. fluid_synth_alloc_voice() expects a pointer to a
/// #fluid_sample_t structure and returns a pointer to the opaque
/// #fluid_voice_t structure. To set or increment the values of a
/// generator, use fluid_voice_gen_set() or fluid_voice_gen_incr(). When you are
/// finished initializing the voice call fluid_voice_start() to
/// start playing the synthesis voice.  Starting with FluidSynth 1.1.0 all voices
/// created will be started at the same time.
typedef fluid_preset_noteon_t
    = ffi.Pointer<ffi.NativeFunction<fluid_preset_noteon_tFunction>>;
typedef fluid_preset_noteon_tFunction = ffi.Int Function(
    ffi.Pointer<fluid_preset_t> preset,
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Int chan,
    ffi.Int key,
    ffi.Int vel);
typedef Dartfluid_preset_noteon_tFunction = int Function(
    ffi.Pointer<fluid_preset_t> preset,
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
    int vel);

/// Method to free a virtual SoundFont preset.
///
/// @param preset Virtual SoundFont preset
/// @return Should return 0
///
/// Any custom user provided cleanup function must ultimately call
/// delete_fluid_preset() to ensure proper cleanup of the #fluid_preset_t struct. If no private data
/// needs to be freed, setting this to delete_fluid_preset() is sufficient.
typedef fluid_preset_free_t
    = ffi.Pointer<ffi.NativeFunction<fluid_preset_free_tFunction>>;
typedef fluid_preset_free_tFunction = ffi.Void Function(
    ffi.Pointer<fluid_preset_t> preset);
typedef Dartfluid_preset_free_tFunction = void Function(
    ffi.Pointer<fluid_preset_t> preset);
typedef fluid_audio_driver_t = _fluid_audio_driver_t;

/// Callback function type used with new_fluid_audio_driver2() to allow for
/// custom user audio processing before the audio is sent to the driver.
///
/// @param data The user data parameter as passed to new_fluid_audio_driver2().
/// @param len Count of audio frames to synthesize.
/// @param nfx Count of arrays in \c fx.
/// @param fx Array of buffers to store effects audio to. Buffers may alias with buffers of \c out.
/// @param nout Count of arrays in \c out.
/// @param out Array of buffers to store (dry) audio to. Buffers may alias with buffers of \c fx.
/// @return Should return #FLUID_OK on success, #FLUID_FAILED if an error occurred.
///
/// This function is responsible for rendering audio to the buffers.
/// The buffers passed to this function are allocated and owned by the respective
/// audio driver and are only valid during that specific call (do not cache them).
/// The buffers have already been zeroed-out.
/// For further details please refer to fluid_synth_process().
///
/// @parblock
/// @note Whereas fluid_synth_process() allows aliasing buffers, there is the guarantee that @p out
/// and @p fx buffers provided by fluidsynth's audio drivers never alias. This prevents downstream
/// applications from e.g. applying a custom effect accidentally to the same buffer multiple times.
/// @endparblock
///
/// @parblock
/// @note Also note that the Jack driver is currently the only driver that has dedicated @p fx buffers
/// (but only if \setting{audio_jack_multi} is true). All other drivers do not provide @p fx buffers.
/// In this case, users are encouraged to mix the effects into the provided dry buffers when calling
/// fluid_synth_process().
/// @code{.cpp}
/// int myCallback(void *, int len, int nfx, float *fx[], int nout, float *out[])
/// {
/// int ret;
/// if(nfx == 0)
/// {
/// float *fxb[4] = {out[0], out[1], out[0], out[1]};
/// ret = fluid_synth_process(synth, len, sizeof(fxb) / sizeof(fxb[0]), fxb, nout, out);
/// }
/// else
/// {
/// ret = fluid_synth_process(synth, len, nfx, fx, nout, out);
/// }
/// // ... client-code ...
/// return ret;
/// }
/// @endcode
/// For other possible use-cases refer to \ref fluidsynth_process.c .
/// @endparblock
typedef fluid_audio_func_t
    = ffi.Pointer<ffi.NativeFunction<fluid_audio_func_tFunction>>;
typedef fluid_audio_func_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> data,
    ffi.Int len,
    ffi.Int nfx,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx,
    ffi.Int nout,
    ffi.Pointer<ffi.Pointer<ffi.Float>> out);
typedef Dartfluid_audio_func_tFunction = int Function(
    ffi.Pointer<ffi.Void> data,
    int len,
    int nfx,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx,
    int nout,
    ffi.Pointer<ffi.Pointer<ffi.Float>> out);
typedef fluid_file_renderer_t = _fluid_file_renderer_t;

/// Sequencer event type enumeration.
abstract class fluid_seq_event_type {
  /// < Note event with duration
  static const int FLUID_SEQ_NOTE = 0;

  /// < Note on event
  static const int FLUID_SEQ_NOTEON = 1;

  /// < Note off event
  static const int FLUID_SEQ_NOTEOFF = 2;

  /// < All sounds off event
  static const int FLUID_SEQ_ALLSOUNDSOFF = 3;

  /// < All notes off event
  static const int FLUID_SEQ_ALLNOTESOFF = 4;

  /// < Bank select message
  static const int FLUID_SEQ_BANKSELECT = 5;

  /// < Program change message
  static const int FLUID_SEQ_PROGRAMCHANGE = 6;

  /// < Program select message
  static const int FLUID_SEQ_PROGRAMSELECT = 7;

  /// < Pitch bend message
  static const int FLUID_SEQ_PITCHBEND = 8;

  /// < Pitch wheel sensitivity set message @since 1.1.0 was misspelled previously
  static const int FLUID_SEQ_PITCHWHEELSENS = 9;

  /// < Modulation controller event
  static const int FLUID_SEQ_MODULATION = 10;

  /// < Sustain controller event
  static const int FLUID_SEQ_SUSTAIN = 11;

  /// < MIDI control change event
  static const int FLUID_SEQ_CONTROLCHANGE = 12;

  /// < Stereo pan set event
  static const int FLUID_SEQ_PAN = 13;

  /// < Volume set event
  static const int FLUID_SEQ_VOLUME = 14;

  /// < Reverb send set event
  static const int FLUID_SEQ_REVERBSEND = 15;

  /// < Chorus send set event
  static const int FLUID_SEQ_CHORUSSEND = 16;

  /// < Timer event (useful for giving a callback at a certain time)
  static const int FLUID_SEQ_TIMER = 17;

  /// < Channel aftertouch event @since 1.1.0
  static const int FLUID_SEQ_CHANNELPRESSURE = 18;

  /// < Polyphonic aftertouch event @since 2.0.0
  static const int FLUID_SEQ_KEYPRESSURE = 19;

  /// < System reset event @since 1.1.0
  static const int FLUID_SEQ_SYSTEMRESET = 20;

  /// < Called when a sequencer client is being unregistered. @since 1.1.0
  static const int FLUID_SEQ_UNREGISTERING = 21;

  /// < Sets a new time scale for the sequencer @since 2.2.0
  static const int FLUID_SEQ_SCALE = 22;

  /// < @internal Defines the count of events enums @warning This symbol
  /// is not part of the public API and ABI stability guarantee and
  /// may change at any time!
  static const int FLUID_SEQ_LASTEVENT = 23;
}

typedef fluid_event_t = _fluid_event_t;
typedef fluid_seq_id_t = ffi.Short;
typedef Dartfluid_seq_id_t = int;

/// MIDI router rule type.
///
/// @since 1.1.0
abstract class fluid_midi_router_rule_type {
  /// < MIDI note rule
  static const int FLUID_MIDI_ROUTER_RULE_NOTE = 0;

  /// < MIDI controller rule
  static const int FLUID_MIDI_ROUTER_RULE_CC = 1;

  /// < MIDI program change rule
  static const int FLUID_MIDI_ROUTER_RULE_PROG_CHANGE = 2;

  /// < MIDI pitch bend rule
  static const int FLUID_MIDI_ROUTER_RULE_PITCH_BEND = 3;

  /// < MIDI channel pressure rule
  static const int FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE = 4;

  /// < MIDI key pressure rule
  static const int FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE = 5;

  /// < @internal Total count of rule types. This symbol
  /// is not part of the public API and ABI stability
  /// guarantee and may change at any time!
  static const int FLUID_MIDI_ROUTER_RULE_COUNT = 6;
}

/// Generic callback function for MIDI event handler.
///
/// @param data User defined data pointer
/// @param event The MIDI event
/// @return Should return #FLUID_OK on success, #FLUID_FAILED otherwise
///
/// This callback is used to pass MIDI events
/// - from \ref midi_player, \ref midi_router or \ref midi_driver
/// - to  \ref midi_router via fluid_midi_router_handle_midi_event()
/// - or to \ref synth via fluid_synth_handle_midi_event().
///
/// Additionally, there is a translation layer to pass MIDI events to
/// a \ref sequencer via fluid_sequencer_add_midi_event_to_buffer().
typedef handle_midi_event_func_t
    = ffi.Pointer<ffi.NativeFunction<handle_midi_event_func_tFunction>>;
typedef handle_midi_event_func_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<fluid_midi_event_t> event);
typedef Darthandle_midi_event_func_tFunction = int Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<fluid_midi_event_t> event);
typedef fluid_midi_router_rule_t = _fluid_midi_router_rule_t;
typedef fluid_midi_driver_t = _fluid_midi_driver_t;

/// MIDI File Player status enum.
/// @since 1.1.0
abstract class fluid_player_status {
  /// < Player is ready
  static const int FLUID_PLAYER_READY = 0;

  /// < Player is currently playing
  static const int FLUID_PLAYER_PLAYING = 1;

  /// < Player is stopping, but hasn't finished yet (currently unused)
  static const int FLUID_PLAYER_STOPPING = 2;

  /// < Player is finished playing
  static const int FLUID_PLAYER_DONE = 3;
}

/// MIDI File Player tempo enum.
/// @since 2.2.0
abstract class fluid_player_set_tempo_type {
  /// < Use midi file tempo set in midi file (120 bpm by default). Multiplied by a factor
  static const int FLUID_PLAYER_TEMPO_INTERNAL = 0;

  /// < Set player tempo in bpm, supersede midi file tempo
  static const int FLUID_PLAYER_TEMPO_EXTERNAL_BPM = 1;

  /// < Set player tempo in us per quarter note, supersede midi file tempo
  static const int FLUID_PLAYER_TEMPO_EXTERNAL_MIDI = 2;

  /// < @internal Value defines the count of player tempo type (#fluid_player_set_tempo_type) @warning This symbol is not part of the public API and ABI stability guarantee and may change at any time!
  static const int FLUID_PLAYER_TEMPO_NBR = 3;
}

/// Generic callback function fired once by MIDI tick change.
///
/// @param data User defined data pointer
/// @param tick The current (zero-based) tick, which triggered the callback
/// @return Should return #FLUID_OK on success, #FLUID_FAILED otherwise
///
/// This callback is fired at a constant rate depending on the current BPM and PPQ.
/// e.g. for PPQ = 192 and BPM = 140 the callback is fired 192 * 140 times per minute (448/sec).
///
/// It can be used to sync external elements with the beat,
/// or stop / loop the song on a given tick.
/// Ticks being BPM-dependent, you can manipulate values such as bars or beats,
/// without having to care about BPM.
///
/// For example, this callback loops the song whenever it reaches the 5th bar :
///
/// @code{.cpp}
/// int handle_tick(void *data, int tick)
/// {
/// fluid_player_t *player = (fluid_player_t *)data;
/// int ppq = 192; // From MIDI header
/// int beatsPerBar = 4; // From the song's time signature
/// int loopBar = 5;
/// int loopTick = (loopBar - 1) * ppq * beatsPerBar;
///
/// if (tick == loopTick)
/// {
/// return fluid_player_seek(player, 0);
/// }
///
/// return FLUID_OK;
/// }
/// @endcode
typedef handle_midi_tick_func_t
    = ffi.Pointer<ffi.NativeFunction<handle_midi_tick_func_tFunction>>;
typedef handle_midi_tick_func_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> data, ffi.Int tick);
typedef Darthandle_midi_tick_func_tFunction = int Function(
    ffi.Pointer<ffi.Void> data, int tick);
typedef fluid_sequencer_t = _fluid_sequencer_t;

/// Event callback prototype for destination clients.
///
/// @param time Current sequencer tick value (see fluid_sequencer_get_tick()).
/// @param event The event being received
/// @param seq The sequencer instance
/// @param data User defined data registered with the client
///
/// @note @p time may not be of the same tick value as the scheduled event! In fact, depending on
/// the sequencer's scale and the synth's sample-rate, @p time may be a few ticks too late. Although this
/// itself is inaudible, it is important to consider,
/// when you use this callback for enqueuing additional events over and over again with
/// fluid_sequencer_send_at(): If you enqueue new events with a relative tick value you might introduce
/// a timing error, which causes your sequence to sound e.g. slower than it's supposed to be. If this is
/// your use-case, make sure to enqueue events with an absolute tick value.
typedef fluid_event_callback_t
    = ffi.Pointer<ffi.NativeFunction<fluid_event_callback_tFunction>>;
typedef fluid_event_callback_tFunction = ffi.Void Function(
    ffi.UnsignedInt time,
    ffi.Pointer<fluid_event_t> event,
    ffi.Pointer<fluid_sequencer_t> seq,
    ffi.Pointer<ffi.Void> data);
typedef Dartfluid_event_callback_tFunction = void Function(
    int time,
    ffi.Pointer<fluid_event_t> event,
    ffi.Pointer<fluid_sequencer_t> seq,
    ffi.Pointer<ffi.Void> data);

/// FluidSynth log levels.
abstract class fluid_log_level {
  /// < The synth can't function correctly any more
  static const int FLUID_PANIC = 0;

  /// < Serious error occurred
  static const int FLUID_ERR = 1;

  /// < Warning
  static const int FLUID_WARN = 2;

  /// < Verbose informational messages
  static const int FLUID_INFO = 3;

  /// < Debugging messages
  static const int FLUID_DBG = 4;

  /// < @internal This symbol is not part of the public API and ABI
  /// stability guarantee and may change at any time!
  static const int LAST_LOG_LEVEL = 5;
}

/// Log function handler callback type used by fluid_set_log_function().
///
/// @param level Log level (#fluid_log_level)
/// @param message Log message text
/// @param data User data pointer supplied to fluid_set_log_function().
typedef fluid_log_function_t
    = ffi.Pointer<ffi.NativeFunction<fluid_log_function_tFunction>>;
typedef fluid_log_function_tFunction = ffi.Void Function(
    ffi.Int level, ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Void> data);
typedef Dartfluid_log_function_tFunction = void Function(
    int level, ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Void> data);

/// Flags defining the polarity, mapping function and type of a modulator source.
/// Compare with SoundFont 2.04 PDF section 8.2.
///
/// Note: Bit values do not correspond to the SoundFont spec!  Also note that
/// #FLUID_MOD_GC and #FLUID_MOD_CC are in the flags field instead of the source field.
abstract class fluid_mod_flags {
  /// < Mapping function is positive
  static const int FLUID_MOD_POSITIVE = 0;

  /// < Mapping function is negative
  static const int FLUID_MOD_NEGATIVE = 1;

  /// < Mapping function is unipolar
  static const int FLUID_MOD_UNIPOLAR = 0;

  /// < Mapping function is bipolar
  static const int FLUID_MOD_BIPOLAR = 2;

  /// < Linear mapping function
  static const int FLUID_MOD_LINEAR = 0;

  /// < Concave mapping function
  static const int FLUID_MOD_CONCAVE = 4;

  /// < Convex mapping function
  static const int FLUID_MOD_CONVEX = 8;

  /// < Switch (on/off) mapping function
  static const int FLUID_MOD_SWITCH = 12;

  /// < General controller source type (#fluid_mod_src)
  static const int FLUID_MOD_GC = 0;

  /// < MIDI CC controller (source will be a MIDI CC number)
  static const int FLUID_MOD_CC = 16;

  /// < Custom non-standard sinus mapping function
  static const int FLUID_MOD_SIN = 128;
}

/// Transform types for the SoundFont2 modulators as defined by SoundFont 2.04 section 8.3.
abstract class fluid_mod_transforms {
  /// < Linear: directly add the computed value to summing node
  static const int FLUID_MOD_TRANSFORM_LINEAR = 0;

  /// < Abs: add the absolute value of the computed to summing node
  static const int FLUID_MOD_TRANSFORM_ABS = 2;
}

/// General controller (if #FLUID_MOD_GC in flags).  This
/// corresponds to SoundFont 2.04 PDF section 8.2.1
abstract class fluid_mod_src {
  /// < No source controller
  static const int FLUID_MOD_NONE = 0;

  /// < MIDI note-on velocity
  static const int FLUID_MOD_VELOCITY = 2;

  /// < MIDI note-on note number
  static const int FLUID_MOD_KEY = 3;

  /// < MIDI key pressure
  static const int FLUID_MOD_KEYPRESSURE = 10;

  /// < MIDI channel pressure
  static const int FLUID_MOD_CHANNELPRESSURE = 13;

  /// < Pitch wheel
  static const int FLUID_MOD_PITCHWHEEL = 14;

  /// < Pitch wheel sensitivity
  static const int FLUID_MOD_PITCHWHEELSENS = 16;
}

/// Generator (effect) numbers (Soundfont 2.01 specifications section 8.1.3)
abstract class fluid_gen_type {
  /// < Sample start address offset (0-32767)
  static const int GEN_STARTADDROFS = 0;

  /// < Sample end address offset (-32767-0)
  static const int GEN_ENDADDROFS = 1;

  /// < Sample loop start address offset (-32767-32767)
  static const int GEN_STARTLOOPADDROFS = 2;

  /// < Sample loop end address offset (-32767-32767)
  static const int GEN_ENDLOOPADDROFS = 3;

  /// < Sample start address coarse offset (X 32768)
  static const int GEN_STARTADDRCOARSEOFS = 4;

  /// < Modulation LFO to pitch
  static const int GEN_MODLFOTOPITCH = 5;

  /// < Vibrato LFO to pitch
  static const int GEN_VIBLFOTOPITCH = 6;

  /// < Modulation envelope to pitch
  static const int GEN_MODENVTOPITCH = 7;

  /// < Filter cutoff
  static const int GEN_FILTERFC = 8;

  /// < Filter Q
  static const int GEN_FILTERQ = 9;

  /// < Modulation LFO to filter cutoff
  static const int GEN_MODLFOTOFILTERFC = 10;

  /// < Modulation envelope to filter cutoff
  static const int GEN_MODENVTOFILTERFC = 11;

  /// < Sample end address coarse offset (X 32768)
  static const int GEN_ENDADDRCOARSEOFS = 12;

  /// < Modulation LFO to volume
  static const int GEN_MODLFOTOVOL = 13;

  /// < Unused
  static const int GEN_UNUSED1 = 14;

  /// < Chorus send amount
  static const int GEN_CHORUSSEND = 15;

  /// < Reverb send amount
  static const int GEN_REVERBSEND = 16;

  /// < Stereo panning
  static const int GEN_PAN = 17;

  /// < Unused
  static const int GEN_UNUSED2 = 18;

  /// < Unused
  static const int GEN_UNUSED3 = 19;

  /// < Unused
  static const int GEN_UNUSED4 = 20;

  /// < Modulation LFO delay
  static const int GEN_MODLFODELAY = 21;

  /// < Modulation LFO frequency
  static const int GEN_MODLFOFREQ = 22;

  /// < Vibrato LFO delay
  static const int GEN_VIBLFODELAY = 23;

  /// < Vibrato LFO frequency
  static const int GEN_VIBLFOFREQ = 24;

  /// < Modulation envelope delay
  static const int GEN_MODENVDELAY = 25;

  /// < Modulation envelope attack
  static const int GEN_MODENVATTACK = 26;

  /// < Modulation envelope hold
  static const int GEN_MODENVHOLD = 27;

  /// < Modulation envelope decay
  static const int GEN_MODENVDECAY = 28;

  /// < Modulation envelope sustain
  static const int GEN_MODENVSUSTAIN = 29;

  /// < Modulation envelope release
  static const int GEN_MODENVRELEASE = 30;

  /// < Key to modulation envelope hold
  static const int GEN_KEYTOMODENVHOLD = 31;

  /// < Key to modulation envelope decay
  static const int GEN_KEYTOMODENVDECAY = 32;

  /// < Volume envelope delay
  static const int GEN_VOLENVDELAY = 33;

  /// < Volume envelope attack
  static const int GEN_VOLENVATTACK = 34;

  /// < Volume envelope hold
  static const int GEN_VOLENVHOLD = 35;

  /// < Volume envelope decay
  static const int GEN_VOLENVDECAY = 36;

  /// < Volume envelope sustain
  static const int GEN_VOLENVSUSTAIN = 37;

  /// < Volume envelope release
  static const int GEN_VOLENVRELEASE = 38;

  /// < Key to volume envelope hold
  static const int GEN_KEYTOVOLENVHOLD = 39;

  /// < Key to volume envelope decay
  static const int GEN_KEYTOVOLENVDECAY = 40;

  /// < Instrument ID (shouldn't be set by user)
  static const int GEN_INSTRUMENT = 41;

  /// < Reserved
  static const int GEN_RESERVED1 = 42;

  /// < MIDI note range
  static const int GEN_KEYRANGE = 43;

  /// < MIDI velocity range
  static const int GEN_VELRANGE = 44;

  /// < Sample start loop address coarse offset (X 32768)
  static const int GEN_STARTLOOPADDRCOARSEOFS = 45;

  /// < Fixed MIDI note number
  static const int GEN_KEYNUM = 46;

  /// < Fixed MIDI velocity value
  static const int GEN_VELOCITY = 47;

  /// < Initial volume attenuation
  static const int GEN_ATTENUATION = 48;

  /// < Reserved
  static const int GEN_RESERVED2 = 49;

  /// < Sample end loop address coarse offset (X 32768)
  static const int GEN_ENDLOOPADDRCOARSEOFS = 50;

  /// < Coarse tuning
  static const int GEN_COARSETUNE = 51;

  /// < Fine tuning
  static const int GEN_FINETUNE = 52;

  /// < Sample ID (shouldn't be set by user)
  static const int GEN_SAMPLEID = 53;

  /// < Sample mode flags
  static const int GEN_SAMPLEMODE = 54;

  /// < Reserved
  static const int GEN_RESERVED3 = 55;

  /// < Scale tuning
  static const int GEN_SCALETUNE = 56;

  /// < Exclusive class number
  static const int GEN_EXCLUSIVECLASS = 57;

  /// < Sample root note override
  static const int GEN_OVERRIDEROOTKEY = 58;

  /// Initial Pitch
  ///
  /// @note This is not "standard" SoundFont generator, because it is not
  /// mentioned in the list of generators in the SF2 specifications.
  /// It is used by FluidSynth internally to compute the nominal pitch of
  /// a note on note-on event. By nature it shouldn't be allowed to be modulated,
  /// however the specification defines a default modulator having "Initial Pitch"
  /// as destination (cf. SF2.01 page 57 section 8.4.10 MIDI Pitch Wheel to Initial Pitch).
  /// Thus it is impossible to cancel this default modulator, which would be required
  /// to let the MIDI Pitch Wheel controller modulate a different generator.
  /// In order to provide this flexibility, FluidSynth >= 2.1.0 uses a default modulator
  /// "Pitch Wheel to Fine Tune", rather than Initial Pitch. The same "compromise" can
  /// be found on the Audigy 2 ZS for instance.
  static const int GEN_PITCH = 59;

  /// < Balance @note Not a real SoundFont generator
  static const int GEN_CUSTOM_BALANCE = 60;

  /// < Custom filter cutoff frequency
  static const int GEN_CUSTOM_FILTERFC = 61;

  /// < Custom filter Q
  static const int GEN_CUSTOM_FILTERQ = 62;

  /// < @internal Value defines the count of generators (#fluid_gen_type)
  /// @warning This symbol is not part of the public API and ABI
  /// stability guarantee and may change at any time!
  static const int GEN_LAST = 63;
}

/// Enum used with fluid_voice_add_mod() to specify how to handle duplicate modulators.
abstract class fluid_voice_add_mod {
  /// < Overwrite any existing matching modulator
  static const int FLUID_VOICE_OVERWRITE = 0;

  /// < Add (sum) modulator amounts
  static const int FLUID_VOICE_ADD = 1;

  /// < For default modulators only, no need to check for duplicates
  static const int FLUID_VOICE_DEFAULT = 2;
}

const int FLUID_PRESET_SELECTED = 0;

const int FLUID_PRESET_UNSELECTED = 1;

const int FLUID_SAMPLE_DONE = 2;

const int FLUID_PRESET_PIN = 3;

const int FLUID_PRESET_UNPIN = 4;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int BUILD_SHARED_LIBS = 1;

const int FLUID_HINT_BOUNDED_BELOW = 1;

const int FLUID_HINT_BOUNDED_ABOVE = 2;

const int FLUID_HINT_TOGGLED = 4;

const int FLUID_HINT_OPTIONLIST = 2;

const int FLUID_OK = 0;

const int FLUID_FAILED = -1;

const String FLUIDSYNTH_VERSION = '2.4.0';

const int FLUIDSYNTH_VERSION_MAJOR = 2;

const int FLUIDSYNTH_VERSION_MINOR = 4;

const int FLUIDSYNTH_VERSION_MICRO = 0;
